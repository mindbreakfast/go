const path = require('path');
const config = require(path.join(__dirname, '..', 'config'));
const database = require(path.join(__dirname, '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', 'utils', 'isAdmin'));
const logger = require(path.join(__dirname, '..', 'utils', 'logger'));

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
function getAddCasinoSteps() {
    return {
        NAME: 'name',
        PROMOCODE: 'promocode',
        SHORT_DESC: 'short_desc',
        FULL_DESC: 'full_desc',
        URL: 'url',
        CATEGORY: 'category',
        KEYWORDS: 'keywords',
        CONFIRM: 'confirm'
    };
}

function getNextCasinoId() {
    const casinos = database.getCasinos();
    let maxId = 0;
    for (const casino of casinos) {
        if (casino.id > maxId) maxId = casino.id;
    }
    return maxId + 1;
}

function getCasino(id) {
    return database.getCasinos().find(c => c.id === id);
}

function validateUrl(url) {
    try {
        new URL(url);
        return true;
    } catch {
        return false;
    }
}

function handleAddCasinoCommand(bot, msg, casinoEditingState) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const response = startCasinoCreation(msg.from.id, casinoEditingState);
    bot.sendMessage(msg.chat.id, response);
}

function startCasinoCreation(userId, casinoEditingState) {
    casinoEditingState.set(userId, {
        step: getAddCasinoSteps().NAME,
        data: {}
    });
    return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∑–∏–Ω–æ:';
}

async function handleCasinoCreationStep(bot, msg, casinoEditingState) {
    const state = casinoEditingState.get(msg.from.id);
    if (!state) return;

    let response = null;

    try {
        const STEPS = getAddCasinoSteps();
        
        switch (state.step) {
            case STEPS.NAME:
                state.data.name = msg.text;
                state.step = STEPS.PROMOCODE;
                response = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:';
                break;

            case STEPS.PROMOCODE:
                state.data.promocode = msg.text;
                state.step = STEPS.SHORT_DESC;
                response = '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:';
                break;

            case STEPS.SHORT_DESC:
                state.data.shortDescription = msg.text;
                state.step = STEPS.FULL_DESC;
                response = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):';
                break;

            case STEPS.FULL_DESC:
                state.data.fullDescription = msg.text === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? '' : msg.text;
                state.step = STEPS.URL;
                response = '–í–≤–µ–¥–∏—Ç–µ URL —Å—Å—ã–ª–∫—É:';
                break;

            case STEPS.URL:
                if (!validateUrl(msg.text)) {
                    response = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:';
                    break;
                }
                state.data.url = msg.text;
                state.step = STEPS.CATEGORY;
                const config = require('../../config');
                const categoriesList = config.CATEGORIES.map(c => `${c.id} - ${c.name}`).join('\n');
                response = `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n${categoriesList}`;
                break;

            case STEPS.CATEGORY:
                state.data.category = msg.text;
                state.step = STEPS.KEYWORDS;
                response = '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):';
                break;

            case STEPS.KEYWORDS:
                state.data.hiddenKeywords = msg.text === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? [] : msg.text.split(',').map(k => k.trim());
                state.step = STEPS.CONFIRM;

                response = `
–ù–∞–∑–≤–∞–Ω–∏–µ: ${state.data.name}
–ü—Ä–æ–º–æ–∫–æ–¥: ${state.data.promocode}
–û–ø–∏—Å–∞–Ω–∏–µ: ${state.data.shortDescription}
–°—Å—ã–ª–∫–∞: ${state.data.url}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.data.category}
–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${state.data.hiddenKeywords.join(', ')}

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ "–¥–∞", –¥–ª—è –æ—Ç–º–µ–Ω—ã "–Ω–µ—Ç"`;
                break;

            case STEPS.CONFIRM:
                if (msg.text.toLowerCase() === '–¥–∞') {
                    const casinos = database.getCasinos();
                    const newCasino = {
                        id: getNextCasinoId(),
                        ...state.data,
                        isActive: true,
                        isPinned: false,
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    };
                    casinos.push(newCasino);
                    database.setCasinos(casinos);

                    await database.saveData();
                    casinoEditingState.delete(msg.from.id);
                    response = `‚úÖ –ö–∞–∑–∏–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ID: ${newCasino.id}`;
                } else {
                    casinoEditingState.delete(msg.from.id);
                    response = '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ';
                }
                break;
        }

        if (response) {
            await bot.sendMessage(msg.chat.id, response);
        }
    } catch (error) {
        logger.error('Error in casino creation:', error);
        await bot.sendMessage(msg.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–∑–∏–Ω–æ');
        casinoEditingState.delete(msg.from.id);
    }
}

async function handleListCasinosCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const casinos = database.getCasinos();
        if (casinos.length === 0) {
            return bot.sendMessage(msg.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ –ø—É—Å—Ç');
        }

        const chunkSize = 10;
        for (let i = 0; i < casinos.length; i += chunkSize) {
            const chunk = casinos.slice(i, i + chunkSize);
            const casinoList = chunk.map(c =>
                `üé∞ ID: ${c.id} - ${c.name}\nüé´ –ü—Ä–æ–º–æ: ${c.promocode}\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${c.category}\nüîó ${c.url}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
            ).join('\n');

            const message = i === 0 ?
                `üìù –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ (${casinos.length}):\n\n${casinoList}` :
                `–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ (${i+1}-${Math.min(i+chunkSize, casinos.length)}):\n\n${casinoList}`;

            await bot.sendMessage(msg.chat.id, message);
            await new Promise(resolve => setTimeout(resolve, 100));
        }
    } catch (error) {
        logger.error('Error listing casinos:', error);
        await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–∑–∏–Ω–æ');
    }
}

function handleEditCasinoCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const id = parseInt(match[1]);
        const casino = getCasino(id);

        if (!casino) {
            return bot.sendMessage(msg.chat.id, `‚ùå –ö–∞–∑–∏–Ω–æ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_name_${id}` },
                        { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: `edit_promo_${id}` }
                    ],
                    [
                        { text: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_desc_${id}` },
                        { text: 'üîó –°—Å—ã–ª–∫–∞', callback_data: `edit_url_${id}` }
                    ],
                    [
                        { text: 'üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data: `edit_category_${id}` },
                        { text: 'üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å', callback_data: `pin_${id}` },
                        { text: 'üëª –°–∫—Ä—ã—Ç—å', callback_data: `hide_${id}` }
                    ],
                    [
                        { text: 'üö´ –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${id}` }
                    ]
                ]
            }
        };

        bot.sendMessage(msg.chat.id,
            `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${casino.name} (ID: ${casino.id})\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            keyboard
        ).catch(error => {
            logger.warn('Error with inline keyboard:', error);
            bot.sendMessage(msg.chat.id,
                `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${casino.name} (ID: ${casino.id})\n–ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/edit_name_${id}\n/edit_promo_${id} –∏ —Ç.–¥.`
            );
        });
    } catch (error) {
        logger.error('Error in edit casino command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞–∑–∏–Ω–æ');
    }
}

async function handleCallbackQuery(bot, query, casinoEditingState) {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    try {
        // üîí –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (!isAdmin(userId)) {
            await bot.answerCallbackQuery(query.id, { text: '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è' });
            return;
        }

        if (data.startsWith('edit_')) {
            const [action, id] = data.split('_').slice(1);
            const casinoId = parseInt(id);

            casinoEditingState.set(chatId, {
                editingCasinoId: casinoId,
                editingField: action
            });

            const fieldNames = {
                name: '–Ω–∞–∑–≤–∞–Ω–∏–µ',
                promo: '–ø—Ä–æ–º–æ–∫–æ–¥',
                desc: '–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                url: 'URL —Å—Å—ã–ª–∫—É',
                category: '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
            };

            await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${fieldNames[action]}:`);
        }
        else if (data.startsWith('delete_')) {
            const casinoId = parseInt(data.split('_')[1]);
            const casinos = database.getCasinos();
            const index = casinos.findIndex(c => c.id === casinoId);

            if (index !== -1) {
                const deleted = casinos.splice(index, 1)[0];
                database.setCasinos(casinos);
                await database.saveData();
                await bot.sendMessage(chatId, `‚úÖ –ö–∞–∑–∏–Ω–æ "${deleted.name}" —É–¥–∞–ª–µ–Ω–æ!`);
            } else {
                await bot.sendMessage(chatId, '‚ùå –ö–∞–∑–∏–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        }
        else if (data.startsWith('pin_')) {
            const casinoId = parseInt(data.split('_')[1]);
            const casinos = database.getCasinos();
            const index = casinos.findIndex(c => c.id === casinoId);

            if (index !== -1) {
                casinos[index].isPinned = !casinos[index].isPinned;
                database.setCasinos(casinos);
                await database.saveData();
                await bot.sendMessage(chatId,
                    `‚úÖ –ö–∞–∑–∏–Ω–æ "${casinos[index].name}" ${casinos[index].isPinned ? '–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' : '–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ'}!`
                );
            }
        }
        else if (data.startsWith('hide_')) {
            const casinoId = parseInt(data.split('_')[1]);
            const casinos = database.getCasinos();
            const index = casinos.findIndex(c => c.id === casinoId);

            if (index !== -1) {
                casinos[index].isActive = false;
                database.setCasinos(casinos);
                await database.saveData();
                await bot.sendMessage(chatId, `‚úÖ –ö–∞–∑–∏–Ω–æ "${casinos[index].name}" —Å–∫—Ä—ã—Ç–æ!`);
            }
        }

        await bot.answerCallbackQuery(query.id);
    } catch (error) {
        logger.error('Callback error:', error);
        await bot.answerCallbackQuery(query.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
}

async function handleCasinoEditResponse(bot, msg, casinoEditingState) {
    const state = casinoEditingState.get(msg.from.id);
    if (!state || !state.editingCasinoId) return;

    try {
        const casino = getCasino(state.editingCasinoId);
        if (!casino) {
            casinoEditingState.delete(msg.from.id);
            return bot.sendMessage(msg.from.id, '‚ùå –ö–∞–∑–∏–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        const casinos = database.getCasinos();
        const index = casinos.findIndex(c => c.id === state.editingCasinoId);
        if (index === -1) {
            casinoEditingState.delete(msg.from.id);
            return bot.sendMessage(msg.from.id, '‚ùå –ö–∞–∑–∏–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        const updates = {};
        switch (state.editingField) {
            case 'name': updates.name = msg.text; break;
            case 'promo': updates.promocode = msg.text; break;
            case 'desc': updates.shortDescription = msg.text; break;
            case 'url': 
                if (!validateUrl(msg.text)) {
                    return bot.sendMessage(msg.from.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:');
                }
                updates.url = msg.text; 
                break;
            case 'category': updates.category = msg.text; break;
        }

        casinos[index] = { ...casinos[index], ...updates, updatedAt: new Date().toISOString() };
        database.setCasinos(casinos);

        await database.saveData();
        casinoEditingState.delete(msg.from.id);

        await bot.sendMessage(msg.from.id, `‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
    } catch (error) {
        logger.error('Error in casino edit response:', error);
        await bot.sendMessage(msg.from.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–∑–∏–Ω–æ');
        casinoEditingState.delete(msg.from.id);
    }
}

module.exports = {
    handleAddCasinoCommand,
    handleListCasinosCommand,
    handleEditCasinoCommand,
    handleCallbackQuery,
    handleCasinoEditResponse,
    handleCasinoCreationStep
};
