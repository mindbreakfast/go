const path = require('path');
const config = require(path.join(__dirname, '..', '..', 'config'));
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));
const logger = require('../../utils/logger');

function handleStatsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized stats command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const userChats = database.getUserChats();
    const streamStatus = database.getStreamStatus();
    const announcements = database.getAnnouncements();
    const casinos = database.getCasinos();
    const pendingApprovals = database.getPendingApprovals();

    const statsMessage = `
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChats.size}
–°—Ç—Ä–∏–º: ${streamStatus.isStreamLive ? '–í –≠–§–ò–†–ï' : '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}
–ê–Ω–æ–Ω—Å–æ–≤: ${announcements.length}
–ö–∞–∑–∏–Ω–æ: ${casinos.length}
–û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${pendingApprovals.length}
–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}
    `.trim();

    logger.info('Stats command executed', {
        userId: msg.from.id,
        users: userChats.size,
        casinos: casinos.length
    });

    bot.sendMessage(msg.chat.id, statsMessage);
}

function handleLiveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized live command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const streamUrl = match[1];
    const eventDescription = match[2];

    database.setStreamStatus({
        isStreamLive: true,
        streamUrl: streamUrl,
        eventDescription: eventDescription,
        lastUpdated: new Date().toISOString()
    });

    database.saveContentData().then(success => {
        if (success) {
            logger.info('Stream started', { streamUrl, eventDescription });
            bot.sendMessage(msg.chat.id, 
                `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${streamUrl}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${eventDescription}`
            );
        } else {
            logger.error('Failed to start stream');
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞');
        }
    });
}

function handleStopCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized stop command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    database.setStreamStatus({
        isStreamLive: false,
        streamUrl: '',
        eventDescription: '',
        lastUpdated: new Date().toISOString()
    });

    database.saveContentData().then(success => {
        if (success) {
            logger.info('Stream stopped');
            bot.sendMessage(msg.chat.id, '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
            logger.error('Failed to stop stream');
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∏–º–∞');
        }
    });
}

function handleTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized text command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    let text = match[1];
    let color = 'blue';

    const colorMatch = text.match(/—Ü–≤–µ—Ç:(\w+)\s+/i);
    if (colorMatch) {
        color = colorMatch[1];
        text = text.replace(colorMatch[0], '');
    }

    const announcements = database.getAnnouncements();
    const newAnnouncement = {
        id: Date.now(),
        text: text,
        color: color,
        createdAt: new Date().toISOString()
    };
    announcements.push(newAnnouncement);
    database.setAnnouncements(announcements);

    database.saveContentData().then(success => {
        if (success) {
            logger.info('Announcement added', { id: newAnnouncement.id, color, length: text.length });
            bot.sendMessage(msg.chat.id,
                `‚úÖ –ê–Ω–æ–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω!\nID: ${newAnnouncement.id}\n–¶–≤–µ—Ç: ${color}\n–¢–µ–∫—Å—Ç: ${text}`
            );
        } else {
            logger.error('Failed to add announcement');
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–æ–Ω—Å–∞');
        }
    });
}

function handleClearTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized cleartext command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    database.setAnnouncements([]);
    
    database.saveContentData().then(success => {
        if (success) {
            logger.info('All announcements cleared');
            bot.sendMessage(msg.chat.id, '‚úÖ –í—Å–µ –∞–Ω–æ–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã!');
        } else {
            logger.error('Failed to clear announcements');
            bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤');
        }
    });
}

function handleListTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized listtext command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const announcements = database.getAnnouncements();
    if (announcements.length === 0) {
        logger.info('List text command - no announcements');
        return bot.sendMessage(msg.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ –ø—É—Å—Ç');
    }

    const announcementList = announcements.map(a =>
        `ID: ${a.id}\n–¶–≤–µ—Ç: ${a.color}\n–¢–µ–∫—Å—Ç: ${a.text}\n–î–∞—Ç–∞: ${new Date(a.createdAt).toLocaleString('ru-RU')}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
    ).join('\n');

    logger.info('List text command executed', { count: announcements.length });
    bot.sendMessage(msg.chat.id,
        `–°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ (${announcements.length}):\n\n${announcementList}`
    );
}

function handleRemoveTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized removetext command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const id = parseInt(match[1]);
    const announcements = database.getAnnouncements();
    const index = announcements.findIndex(a => a.id === id);

    if (index !== -1) {
        const removed = announcements.splice(index, 1)[0];
        database.setAnnouncements(announcements);
        
        database.saveContentData().then(success => {
            if (success) {
                logger.info('Announcement removed', { id, text: removed.text });
                bot.sendMessage(msg.chat.id,
                    `‚úÖ –ê–Ω–æ–Ω—Å —É–¥–∞–ª–µ–Ω!\nID: ${id}\n–¢–µ–∫—Å—Ç: ${removed.text}`
                );
            } else {
                logger.error('Failed to remove announcement', { id });
                bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–æ–Ω—Å–∞');
            }
        });
    } else {
        logger.warn('Announcement not found for removal', { id });
        bot.sendMessage(msg.chat.id, `‚ùå –ê–Ω–æ–Ω—Å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
}

async function handleBroadcastCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized broadcast command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const message = match[1];
    const userChats = database.getUserChats();
    let successCount = 0;
    let errorCount = 0;

    logger.info('Starting broadcast', { users: userChats.size, messageLength: message.length });
    bot.sendMessage(msg.chat.id, `üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${userChats.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    for (const [userId] of userChats) {
        try {
            await bot.sendMessage(userId, message);
            successCount++;
            await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
            errorCount++;
            logger.debug('Broadcast failed for user', { userId, error: error.message });
        }
    }

    logger.info('Broadcast completed', { success: successCount, errors: errorCount });
    bot.sendMessage(msg.from.id,
        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úì –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚úó –û—à–∏–±–æ–∫: ${errorCount}`
    );
}

function handleApproveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized approve command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const userId = parseInt(match[1]);
    const success = database.approveUserAccess(userId);
    
    if (success) {
        logger.info('User approved', { userId });
        bot.sendMessage(msg.chat.id, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∞–π–≤ –∫–æ–º–Ω–∞—Ç–µ!`);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            bot.sendMessage(userId, 'üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ª–∞–π–≤ –∫–æ–º–Ω–∞—Ç–µ –æ–¥–æ–±—Ä–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        } catch (error) {
            logger.warn('Cannot notify approved user', { userId, error: error.message });
        }
    } else {
        logger.warn('Failed to approve user', { userId });
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
}

function handleApprovalsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized approvals command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const pending = database.getPendingApprovals();
    if (pending.length === 0) {
        logger.info('Approvals command - no pending requests');
        return bot.sendMessage(msg.chat.id, 'üìù –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–µ—Ç');
    }

    const approvalList = pending.map(req => 
        `ID: ${req.userId}\nUsername: @${req.requestedUsername}\n–ó–∞–ø—Ä–æ—Å–∏–ª: ${new Date(req.requestedAt).toLocaleString('ru-RU')}\n/odobri_${req.userId}`
    ).join('\n\n');

    logger.info('Approvals command executed', { count: pending.length });
    bot.sendMessage(msg.chat.id,
        `–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (${pending.length}):\n\n${approvalList}`
    );
}

// üìä –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ
function handleCasinoStatsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized casino stats command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const stats = database.getCasinoStats();
    
    if (stats.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ –ø—É—Å—Ç–∞');
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram
    const chunks = [];
    let currentChunk = 'üé∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ (–∫–ª–∏–∫–∏/—Å–∫—Ä—ã—Ç–∏—è):\n\n';
    
    for (const casino of stats.slice(0, 20)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –∫–∞–∑–∏–Ω–æ
        const line = `${casino.isPinned ? 'üìå ' : ''}${casino.name}\nüëÜ ${casino.clicks} | üôà ${casino.hides}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
        
        if (currentChunk.length + line.length > 4000) {
            chunks.push(currentChunk);
            currentChunk = line;
        } else {
            currentChunk += line;
        }
    }
    
    chunks.push(currentChunk);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
    (async () => {
        for (let i = 0; i < chunks.length; i++) {
            await bot.sendMessage(msg.chat.id, chunks[i]);
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    })();

    logger.info('Casino stats command executed', { count: stats.length });
}

// üé§ –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: –ê—É–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç
function handleVoiceAuditCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        logger.warn('Unauthorized voice audit command attempt', { userId: msg.from.id });
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const logs = database.getVoiceAccessLogs(30);
    
    if (logs.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üé§ –ó–∞–ø–∏—Å–µ–π –æ –≤—Ö–æ–¥–∞—Ö –≤ –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–µ—Ç');
    }

    const logList = logs.map(log => 
        `üë§ ${log.username} (${log.userId})\nüéß ${log.roomType}\nüïê ${new Date(log.timestamp).toLocaleString('ru-RU')}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
    ).join('\n');

    bot.sendMessage(msg.chat.id,
        `üé§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—ã –≤ –≥–æ–ª–æ—Å–æ–≤—ã–µ (${logs.length}):\n\n${logList}`
    );

    logger.info('Voice audit command executed', { count: logs.length });
}

module.exports = {
    isAdmin,
    handleStatsCommand,
    handleLiveCommand,
    handleStopCommand,
    handleTextCommand,
    handleClearTextCommand,
    handleListTextCommand,
    handleRemoveTextCommand,
    handleBroadcastCommand,
    handleApproveCommand,
    handleApprovalsCommand,
    handleCasinoStatsCommand,
    handleVoiceAuditCommand
};
