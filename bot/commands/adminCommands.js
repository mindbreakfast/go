const path = require('path');
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));
const logger = require(path.join(__dirname, '..', '..', 'utils', 'logger'));

function handleStatsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const userChats = database.getUserChats();
        const casinos = database.getCasinos();
        const pendingApprovals = database.getPendingApprovals();
        const streamStatus = database.getStreamStatus();

        const message = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChats.size}
üé∞ –ö–∞–∑–∏–Ω–æ: ${casinos.length} (${casinos.filter(c => c.isActive).length} –∞–∫—Ç–∏–≤–Ω—ã—Ö)
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${pendingApprovals.length}
üì° –°—Ç—Ä–∏–º: ${streamStatus.isStreamLive ? 'üî¥ –í –≠–§–ò–†–ï' : '‚ö´ –ù–ï –í –≠–§–ò–†–ï'}

üíæ –ü–∞–º—è—Ç—å: ${(process.memoryUsage().rss / 1024 / 1024).toFixed(2)} MB`;

        bot.sendMessage(msg.chat.id, message);
    } catch (error) {
        logger.error('Error in stats command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
}

function handleLiveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const url = match[1];
        const description = match[2] || '–ò–¥–µ—Ç –ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä!';

        database.setStreamStatus({
            isStreamLive: true,
            streamUrl: url,
            eventDescription: description,
            lastUpdated: new Date().toISOString()
        });

        bot.sendMessage(msg.chat.id, `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${url}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
    } catch (error) {
        logger.error('Error in live command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∏–º–∞');
    }
}

function handleStopCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        database.setStreamStatus({
            isStreamLive: false,
            streamUrl: '',
            eventDescription: '',
            lastUpdated: new Date().toISOString()
        });

        bot.sendMessage(msg.chat.id, '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
        logger.error('Error in stop command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∏–º–∞');
    }
}

// ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ adminCommands —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)

module.exports = {
    handleStatsCommand,
    handleLiveCommand,
    handleStopCommand,
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
};
