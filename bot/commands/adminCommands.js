const path = require('path');
const database = require(path.join(__dirname, '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', 'utils', 'isAdmin'));
const logger = require(path.join(__dirname, '..', 'utils', 'logger'));

function handleStatsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const userChats = database.getUserChats();
        const casinos = database.getCasinos();
        const pendingApprovals = database.getPendingApprovals();
        const streamStatus = database.getStreamStatus();

        const message = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChats.size}
üé∞ –ö–∞–∑–∏–Ω–æ: ${casinos.length} (${casinos.filter(c => c.isActive).length} –∞–∫—Ç–∏–≤–Ω—ã—Ö)
‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${pendingApprovals.length}
üì° –°—Ç—Ä–∏–º: ${streamStatus.isStreamLive ? 'üî¥ –í –≠–§–ò–†–ï' : '‚ö´ –ù–ï –í –≠–§–ò–†–ï'}

üíæ –ü–∞–º—è—Ç—å: ${(process.memoryUsage().rss / 1024 / 1024).toFixed(2)} MB`;

        bot.sendMessage(msg.chat.id, message);
    } catch (error) {
        logger.error('Error in stats command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
}

function handleLiveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const url = match[1];
        const description = match[2] || '–ò–¥–µ—Ç –ø—Ä—è–º–æ–π —ç—Ñ–∏—Ä!';

        database.setStreamStatus({
            isStreamLive: true,
            streamUrl: url,
            eventDescription: description,
            lastUpdated: new Date().toISOString()
        });

        bot.sendMessage(msg.chat.id, `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${url}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${description}`);
    } catch (error) {
        logger.error('Error in live command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∏–º–∞');
    }
}

function handleStopCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        database.setStreamStatus({
            isStreamLive: false,
            streamUrl: '',
            eventDescription: '',
            lastUpdated: new Date().toISOString()
        });

        bot.sendMessage(msg.chat.id, '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
        logger.error('Error in stop command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∏–º–∞');
    }
}

function handleTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const text = match[1];
        const color = match[2] || 'blue';

        if (!text) {
            return bot.sendMessage(msg.chat.id, '‚ùå –§–æ—Ä–º–∞—Ç: /text [—Å–æ–æ–±—â–µ–Ω–∏–µ] [—Ü–≤–µ—Ç]\n–¶–≤–µ—Ç–∞: blue, green, red, yellow, purple');
        }

        const announcements = database.getAnnouncements();
        const newAnnouncement = {
            id: announcements.length + 1,
            text: text,
            color: color,
            createdAt: new Date().toISOString()
        };

        announcements.push(newAnnouncement);
        database.setAnnouncements(announcements);

        bot.sendMessage(msg.chat.id, `‚úÖ –ê–Ω–æ–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω!\nID: ${newAnnouncement.id}\n–¶–≤–µ—Ç: ${color}`);
    } catch (error) {
        logger.error('Error in text command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–æ–Ω—Å–∞');
    }
}

function handleClearTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        database.setAnnouncements([]);
        bot.sendMessage(msg.chat.id, '‚úÖ –í—Å–µ –∞–Ω–æ–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã!');
    } catch (error) {
        logger.error('Error in clear text command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞–Ω–æ–Ω—Å–æ–≤');
    }
}

function handleListTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const announcements = database.getAnnouncements();
        if (announcements.length === 0) {
            return bot.sendMessage(msg.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ –ø—É—Å—Ç');
        }

        const message = announcements.map(ann => 
            `ID: ${ann.id}\n–¢–µ–∫—Å—Ç: ${ann.text}\n–¶–≤–µ—Ç: ${ann.color}\n–î–∞—Ç–∞: ${new Date(ann.createdAt).toLocaleString()}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
        ).join('\n\n');

        bot.sendMessage(msg.chat.id, `üìù –°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ (${announcements.length}):\n\n${message}`);
    } catch (error) {
        logger.error('Error in list text command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–Ω–æ–Ω—Å–æ–≤');
    }
}

function handleRemoveTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const id = parseInt(match[1]);
        const announcements = database.getAnnouncements();
        const index = announcements.findIndex(a => a.id === id);

        if (index === -1) {
            return bot.sendMessage(msg.chat.id, `‚ùå –ê–Ω–æ–Ω—Å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        const removed = announcements.splice(index, 1)[0];
        database.setAnnouncements(announcements);

        bot.sendMessage(msg.chat.id, `‚úÖ –ê–Ω–æ–Ω—Å —É–¥–∞–ª–µ–Ω!\nID: ${removed.id}\n–¢–µ–∫—Å—Ç: ${removed.text}`);
    } catch (error) {
        logger.error('Error in remove text command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–æ–Ω—Å–∞');
    }
}

function handleBroadcastCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    bot.sendMessage(msg.chat.id, 'üì¢ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
}

function handleApproveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const userId = parseInt(match[1]);
        if (database.approveUserAccess(userId)) {
            bot.sendMessage(msg.chat.id, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–¥–æ–±—Ä–µ–Ω!`);
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω');
        }
    } catch (error) {
        logger.error('Error in approve command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
}

function handleApprovalsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const pendingApprovals = database.getPendingApprovals();
        if (pendingApprovals.length === 0) {
            return bot.sendMessage(msg.chat.id, '‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–æ–∫');
        }

        const message = pendingApprovals.map((req, index) => 
            `${index + 1}. ID: ${req.userId} - @${req.requestedUsername || 'unknown'}\n   üìÖ ${new Date(req.requestedAt).toLocaleString()}`
        ).join('\n\n');

        bot.sendMessage(msg.chat.id, `‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è (${pendingApprovals.length}):\n\n${message}`);
    } catch (error) {
        logger.error('Error in approvals command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫');
    }
}

function handleCasinoStatsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const stats = database.getCasinoStats();
        if (stats.length === 0) {
            return bot.sendMessage(msg.chat.id, 'üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∫–∞–∑–∏–Ω–æ');
        }

        const message = stats.slice(0, 10).map((casino, index) => 
            `${index + 1}. ${casino.name}\n   üëÜ ${casino.clicks} –∫–ª–∏–∫–æ–≤ | üëª ${casino.hides} —Å–∫—Ä—ã—Ç–∏–π ${casino.isPinned ? 'üìå' : ''}`
        ).join('\n\n');

        bot.sendMessage(msg.chat.id, `üìä –¢–æ–ø –∫–∞–∑–∏–Ω–æ –ø–æ –∫–ª–∏–∫–∞–º:\n\n${message}`);
    } catch (error) {
        logger.error('Error in casino stats command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∑–∏–Ω–æ');
    }
}

function handleVoiceAuditCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const logs = database.getVoiceAccessLogs(20);
        if (logs.length === 0) {
            return bot.sendMessage(msg.chat.id, 'üéôÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç—É–ø–∞—Ö –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–æ–º–Ω–∞—Ç–∞–º');
        }

        const message = logs.map((log, index) => 
            `${index + 1}. User#${log.userId} (${log.username})\n   üéöÔ∏è ${log.roomType} | üìÖ ${new Date(log.timestamp).toLocaleString()}`
        ).join('\n\n');

        bot.sendMessage(msg.chat.id, `üéôÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç—É–ø—ã –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º:\n\n${message}`);
    } catch (error) {
        logger.error('Error in voice audit command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç');
    }
}

module.exports = {
    handleStatsCommand,
    handleLiveCommand,
    handleStopCommand,
    handleTextCommand,
    handleClearTextCommand,
    handleListTextCommand,
    handleRemoveTextCommand,
    handleBroadcastCommand,
    handleApproveCommand,
    handleApprovalsCommand,
    handleCasinoStatsCommand,
    handleVoiceAuditCommand
};
