console.log('‚úÖ adminCommands loaded');
const path = require('path');
const config = require(path.join(__dirname, '..', '..', 'config'));
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));

function handleStatsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const userChats = database.getUserChats();
    const streamStatus = database.getStreamStatus();
    const announcements = database.getAnnouncements();
    const casinos = database.getCasinos();

    bot.sendMessage(msg.chat.id,
        `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChats.size}\n` +
        `–°—Ç—Ä–∏–º: ${streamStatus.isStreamLive ? '–í –≠–§–ò–†–ï' : '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `–ê–Ω–æ–Ω—Å–æ–≤: ${announcements.length}\n` +
        `–ö–∞–∑–∏–Ω–æ: ${casinos.length}\n` +
        `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}`
    );
}

function handleLiveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const streamUrl = match[1];
    const eventDescription = match[2];

    database.setStreamStatus({
        isStreamLive: true,
        streamUrl: streamUrl,
        eventDescription: eventDescription,
        lastUpdated: new Date().toISOString()
    });

    database.saveData().then(success => {
        bot.sendMessage(msg.chat.id, success ?
            `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${streamUrl}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${eventDescription}` :
            '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞'
        );
    });
}

function handleStopCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    database.setStreamStatus({
        isStreamLive: false,
        streamUrl: '',
        eventDescription: '',
        lastUpdated: new Date().toISOString()
    });

    database.saveData().then(success => {
        bot.sendMessage(msg.chat.id, success ?
            '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' :
            '‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∏–º–∞'
        );
    });
}

function handleTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    let text = match[1];
    let color = 'blue';

    const colorMatch = text.match(/—Ü–≤–µ—Ç:(\w+)\s+/i);
    if (colorMatch) {
        color = colorMatch[1];
        text = text.replace(colorMatch[0], '');
    }

    const announcements = database.getAnnouncements();
    const newAnnouncement = {
        id: Date.now(),
        text: text,
        color: color,
        createdAt: new Date().toISOString()
    };
    announcements.push(newAnnouncement);
    database.setAnnouncements(announcements);

    database.saveData().then(() => {
        bot.sendMessage(msg.chat.id,
            `‚úÖ –ê–Ω–æ–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω!\nID: ${newAnnouncement.id}\n–¶–≤–µ—Ç: ${color}\n–¢–µ–∫—Å—Ç: ${text}`
        );
    });
}

function handleClearTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    database.setAnnouncements([]);
    database.saveData().then(() => {
        bot.sendMessage(msg.chat.id, '‚úÖ –í—Å–µ –∞–Ω–æ–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã!');
    });
}

function handleListTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const announcements = database.getAnnouncements();
    if (announcements.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ –ø—É—Å—Ç');
    }

    const announcementList = announcements.map(a =>
        `ID: ${a.id}\n–¶–≤–µ—Ç: ${a.color}\n–¢–µ–∫—Å—Ç: ${a.text}\n–î–∞—Ç–∞: ${new Date(a.createdAt).toLocaleString('ru-RU')}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
    ).join('\n');

    bot.sendMessage(msg.chat.id,
        `–°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ (${announcements.length}):\n\n${announcementList}`
    );
}

function handleRemoveTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const id = parseInt(match[1]);
    const announcements = database.getAnnouncements();
    const index = announcements.findIndex(a => a.id === id);

    if (index !== -1) {
        const removed = announcements.splice(index, 1)[0];
        database.setAnnouncements(announcements);
        database.saveData().then(() => {
            bot.sendMessage(msg.chat.id,
                `‚úÖ –ê–Ω–æ–Ω—Å —É–¥–∞–ª–µ–Ω!\nID: ${id}\n–¢–µ–∫—Å—Ç: ${removed.text}`
            );
        });
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ê–Ω–æ–Ω—Å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
}

async function handleBroadcastCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const message = match[1];
    const userChats = database.getUserChats();
    let successCount = 0;
    let errorCount = 0;

    bot.sendMessage(msg.chat.id, `üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${userChats.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    for (const [userId] of userChats) {
        try {
            await bot.sendMessage(userId, `üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï:\n\n${message}`);
            successCount++;
            await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
            errorCount++;
        }
    }

    bot.sendMessage(msg.from.id,
        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
        `‚úì –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
        `‚úó –û—à–∏–±–æ–∫: ${errorCount}`
    );
}

function handleApproveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const userId = parseInt(match[1]);
    const success = database.approveUserAccess(userId);
    
    if (success) {
        bot.sendMessage(msg.chat.id, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∞–π–≤ –∫–æ–º–Ω–∞—Ç–µ!`);
        bot.sendMessage(userId, 'üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ª–∞–π–≤ –∫–æ–º–Ω–∞—Ç–µ –æ–¥–æ–±—Ä–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
}

function handleApprovalsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const pending = database.getPendingApprovals();
    if (pending.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üìù –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–µ—Ç');
    }

    const approvalList = pending.map(req => 
        `ID: ${req.userId}\nUsername: @${req.requestedUsername}\n–ó–∞–ø—Ä–æ—Å–∏–ª: ${new Date(req.requestedAt).toLocaleString('ru-RU')}\n/odobri_${req.userId}`
    ).join('\n\n');

    bot.sendMessage(msg.chat.id,
        `–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (${pending.length}):\n\n${approvalList}`
    );
}

module.exports = {
    isAdmin,
    handleStatsCommand,
    handleLiveCommand,
    handleStopCommand,
    handleTextCommand,
    handleClearTextCommand,
    handleListTextCommand,
    handleRemoveTextCommand,
    handleBroadcastCommand,
    handleApproveCommand,
    handleApprovalsCommand
};
