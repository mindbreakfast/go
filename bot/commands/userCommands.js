const path = require('path');
const config = require(path.join(__dirname, '..', '..', 'config'));
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));
const { casinoEditingState } = require('../state');
const logger = require('../../utils/logger');

function handleStartCommand(bot, msg) {
    logger.info('Start command received', { userId: msg.from.id });
    const user = msg.from;
    
    database.trackUserAction(user.id, user, 'start');

    // üî• –û–±—Ä–∞–±–æ—Ç–∫–∞ deep link –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    if (msg.text && msg.text.includes('giftme_')) {
        const contestId = msg.text.split(' ')[1];
        logger.info('Contest deep link detected', { userId: user.id, contestId });
        handleContestJoin(bot, msg, contestId);
        return;
    }

    if (msg.text && msg.text.includes('request_approval')) {
        logger.info('Approval request from start command', { userId: user.id });
        database.requestApproval(user.id, user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω');
        bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.');
        return;
    }

    if (msg.text && msg.text.includes(' ')) {
        const referralCode = msg.text.split(' ')[1];
        if (referralCode.startsWith('ref')) {
            const referrerId = parseInt(referralCode.substring(3));
            if (!isNaN(referrerId) && referrerId !== user.id) {
                logger.info('Referral detected via start', { userId: user.id, referrerId });
                database.handleReferralStart(user.id, referrerId);
            }
        }
    }

    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: config.WEB_APP_URL }
                }
            ]]
        }
    };

    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ:', keyboard)
        .catch(error => logger.error('Error sending welcome message:', { error: error.message }));
}

function handleContestJoin(bot, msg, contestId) {
    const user = msg.from;
    logger.info('Contest join attempt', { userId: user.id, contestId });

    bot.sendMessage(msg.chat.id,
        `üéÅ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!\n\n` +
        `–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω–æ:\n` +
        `üìß –í–∞—à–∞ –ø–æ—á—Ç–∞ –≤ –∫–∞–∑–∏–Ω–æ\n` +
        `üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞\n\n` +
        `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É:`
    );
}

function handleHelpCommand(bot, msg) {
    logger.info('Help command received', { userId: msg.from.id });
    const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/casino_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/voice_audit - –ê—É–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
/live [—Å—Å—ã–ª–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ù–∞—á–∞—Ç—å —Å—Ç—Ä–∏–º
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º
/text [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å
/clear_text - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/list_text - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/remove_text [ID] - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–æ–Ω—Å
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/add_casino - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∑–∏–Ω–æ
/list_casinos - –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/edit_casino [ID] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∑–∏–Ω–æ
/ref_stats - –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤

–ü—Ä–∏–º–µ—Ä—ã:
/live https://twitch.tv –ú–æ–π –∫—Ä—É—Ç–æ–π —Å—Ç—Ä–∏–º
/text —Ü–≤–µ—Ç:green üéâ –ëonus 200%!
/remove_text 123456789
    `.trim();

    bot.sendMessage(msg.chat.id, helpText)
        .catch(error => logger.error('Error sending help:', { error: error.message }));
}

function handleMessage(bot, msg) {
    const text = msg.text;
    if (!text) {
        logger.debug('Empty text in handleMessage');
        return;
    }

    logger.debug('Handling message', { userId: msg.from.id, text: text.substring(0, 50) });

    // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    const statsRegex = /^\/stats($|\s)/;
    const liveRegex = /^\/live($|\s)/;
    const stopRegex = /^\/stop($|\s)/;
    const textRegex = /^\/text($|\s)/; // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
    const clearTextRegex = /^\/clear_text($|\s)/;
    const listTextRegex = /^\/list_text($|\s)/;
    const removeTextRegex = /^\/remove_text($|\s)/;
    const broadcastRegex = /^\/broadcast($|\s)/;
    const addCasinoRegex = /^\/add_casino($|\s)/;
    const listCasinosRegex = /^\/list_casinos($|\s)/;
    const editCasinoRegex = /^\/edit_casino($|\s)/;
    const approveRegex = /^\/odobri($|\s)/;
    const approvalsRegex = /^\/approvals($|\s)/;
    const referralRegex = /^\/referral($|\s)/;
    const startRegex = /^\/start($|\s)/;
    const helpRegex = /^\/help($|\s)/;
    const casinoStatsRegex = /^\/casino_stats($|\s)/;
    const voiceAuditRegex = /^\/voice_audit($|\s)/;
    const refStatsRegex = /^\/ref_stats($|\s)/;

    if (startRegex.test(text)) {
        handleStartCommand(bot, msg);
        return;
    }

    if (helpRegex.test(text)) {
        handleHelpCommand(bot, msg);
        return;
    }

    // ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê TEXT –ö–û–ú–ê–ù–î–´
    if (textRegex.test(text)) {
        logger.info('Text command received', { userId: msg.from.id });
        const adminCommands = require('./adminCommands');
        const messageText = text.substring(5).trim();
        adminCommands.handleTextCommand(bot, msg, [null, messageText]);
        return;
    }

    if (database.getUserChats().get(msg.from.id)?.waitingForApproval) {
        handleApprovalRequest(bot, msg);
        return;
    }

    // üìä –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if (casinoStatsRegex.test(text)) {
        logger.info('Casino stats command received', { userId: msg.from.id });
        const adminCommands = require('./adminCommands');
        adminCommands.handleCasinoStatsCommand(bot, msg);
        return;
    }

    if (voiceAuditRegex.test(text)) {
        logger.info('Voice audit command received', { userId: msg.from.id });
        const adminCommands = require('./adminCommands');
        adminCommands.handleVoiceAuditCommand(bot, msg);
        return;
    }

    if (refStatsRegex.test(text)) {
        logger.info('Ref stats command received', { userId: msg.from.id });
        const referralCommands = require('./referralCommands');
        referralCommands.handleRefStatsCommand(bot, msg);
        return;
    }

    // –û—Å—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥...
    if (statsRegex.test(text)) {
        logger.info('Stats command received', { userId: msg.from.id });
        const adminCommands = require('./adminCommands');
        adminCommands.handleStatsCommand(bot, msg);
    } else if (liveRegex.test(text)) {
        logger.info('Live command received', { userId: msg.from.id });
        const adminCommands = require('./adminCommands');
        const params = text.substring(6).trim();
        const spaceIndex = params.indexOf(' ');
        if (spaceIndex > 0) {
            const streamUrl = params.substring(0, spaceIndex);
            const eventDescription = params.substring(spaceIndex + 1);
            adminCommands.handleLiveCommand(bot, msg, [null, streamUrl, eventDescription]);
        } else {
            bot.sendMessage(msg.chat.id, '‚ùå –§–æ—Ä–º–∞—Ç: /live [—Å—Å—ã–ª–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ]');
        }
    }
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
}

function handleApprovalRequest(bot, msg) {
    const username = msg.text.trim();
    const userId = msg.from.id;
    
    logger.info('Approval request processing', { userId, username });
    
    if (!username.startsWith('@') || username.length < 5) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username')
            .catch(error => logger.error('Error sending validation message:', { error: error.message }));
    }

    const success = database.requestApproval(userId, username);
    if (success) {
        bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ.')
            .catch(error => logger.error('Error sending success message:', { error: error.message }));
        
        const admins = config.ADMINS;
        admins.forEach(adminId => {
            if (isAdmin(adminId)) {
                bot.sendMessage(adminId,
                    `üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ!\nID: ${userId}\nUsername: ${username}\n/odobri_${userId}`
                ).catch(error => logger.error(`Error notifying admin ${adminId}:`, { error: error.message }));
            }
        });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
            .catch(error => logger.error('Error sending error message:', { error: error.message }));
    }
}

module.exports = {
    handleStartCommand,
    handleHelpCommand,
    handleMessage,
    handleApprovalRequest,
    handleContestJoin
};
