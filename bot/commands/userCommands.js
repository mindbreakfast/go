console.log('‚úÖ userCommands loaded');
const path = require('path');
const config = require(path.join(__dirname, '..', '..', 'config'));
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));
const { casinoEditingState } = require('../state'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –æ–±—â–µ–≥–æ –º–æ–¥—É–ª—è

function handleStartCommand(bot, msg) {
    console.log(`üé¨ Handling /start for user ${msg.from.id}`);
    const user = msg.from;
    database.trackUserAction(user.id, user, 'start');

    if (msg.text && msg.text.includes('request_approval')) {
        console.log(`üìã Approval request from user ${user.id}`);
        database.requestApproval(user.id, user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω');
        bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.');
        return;
    }

    if (msg.text && msg.text.includes(' ')) {
        const referralCode = msg.text.split(' ')[1];
        if (referralCode.startsWith('ref')) {
            const referrerId = parseInt(referralCode.substring(3));
            if (!isNaN(referrerId) && referrerId !== user.id) {
                console.log(`ü§ù Referral detected: user ${user.id} referred by ${referrerId}`);
                database.handleReferralStart(user.id, referrerId);
            }
        }
    }

    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: config.WEB_APP_URL }
                }
            ]]
        }
    };

    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ:', keyboard)
        .catch(error => console.error('Error sending welcome message:', error.message));
}

function handleHelpCommand(bot, msg) {
    console.log(`‚ùì Handling /help for user ${msg.from.id}`);
    const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
/live [—Å—Å—ã–ª–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ù–∞—á–∞—Ç—å —Å—Ç—Ä–∏–º
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º
/text [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å
/clear_text - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/list_text - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/remove_text [ID] - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–æ–Ω—Å
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/add_casino - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∑–∏–Ω–æ
/list_casinos - –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/edit_casino [ID] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∑–∏–Ω–æ

–ü—Ä–∏–º–µ—Ä—ã:
/live https://twitch.tv –ú–æ–π –∫—Ä—É—Ç–æ–π —Å—Ç—Ä–∏–º
/text —Ü–≤–µ—Ç:green üéâ –ëonus 200%!
/remove_text 123456789
    `;

    bot.sendMessage(msg.chat.id, helpText)
        .catch(error => console.error('Error sending help:', error.message));
}

function handleMessage(bot, msg) {
    const text = msg.text;
    if (!text) {
        console.log('‚ö†Ô∏è Empty text in handleMessage');
        return;
    }

    console.log(`üìù Handling message: "${text.substring(0, 30)}" from user ${msg.from.id}`);

    const statsRegex = /^\/stats$/;
    const liveRegex = /^\/live (.+?) (.+)/;
    const stopRegex = /^\/stop$/;
    const textRegex = /^\/text (.+)/;
    const clearTextRegex = /^\/clear_text$/;
    const listTextRegex = /^\/list_text$/;
    const removeTextRegex = /^\/remove_text (\d+)/;
    const broadcastRegex = /^\/broadcast (.+)/;
    const addCasinoRegex = /^\/add_casino$/;
    const listCasinosRegex = /^\/list_casinos$/;
    const editCasinoRegex = /^\/edit_casino (\d+)/;
    const approveRegex = /^\/odobri (\d+)$/;
    const approvalsRegex = /^\/approvals$/;
    const referralRegex = /^\/referral$/;

    if (database.getUserChats().get(msg.from.id)?.waitingForApproval) {
        console.log(`‚è≥ Handling approval response from user ${msg.from.id}`);
        handleApprovalRequest(bot, msg);
        return;
    }

    if (statsRegex.test(text)) {
        console.log(`üìä Handling /stats from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleStatsCommand(bot, msg);
    } else if (liveRegex.test(text)) {
        console.log(`üé• Handling /live from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleLiveCommand(bot, msg, text.match(liveRegex));
    } else if (stopRegex.test(text)) {
        console.log(`‚èπÔ∏è Handling /stop from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleStopCommand(bot, msg);
    } else if (textRegex.test(text)) {
        console.log(`üìù Handling /text from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleTextCommand(bot, msg, text.match(textRegex));
    } else if (clearTextRegex.test(text)) {
        console.log(`üßπ Handling /clear_text from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleClearTextCommand(bot, msg);
    } else if (listTextRegex.test(text)) {
        console.log(`üìã Handling /list_text from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleListTextCommand(bot, msg);
    } else if (removeTextRegex.test(text)) {
        console.log(`üóëÔ∏è Handling /remove_text from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleRemoveTextCommand(bot, msg, text.match(removeTextRegex));
    } else if (broadcastRegex.test(text)) {
        console.log(`üì¢ Handling /broadcast from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleBroadcastCommand(bot, msg, text.match(broadcastRegex));
    } else if (addCasinoRegex.test(text)) {
        console.log(`üé∞ Handling /add_casino from user ${msg.from.id}`);
        const casinoCommands = require('./casinoCommands');
        // –£–ë–ò–†–ê–ï–ú –∏–º–ø–æ—Ä—Ç –±–æ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        casinoCommands.handleAddCasinoCommand(bot, msg, casinoEditingState);
    } else if (listCasinosRegex.test(text)) {
        console.log(`üìã Handling /list_casinos from user ${msg.from.id}`);
        const casinoCommands = require('./casinoCommands');
        casinoCommands.handleListCasinosCommand(bot, msg);
    } else if (editCasinoRegex.test(text)) {
        console.log(`‚úèÔ∏è Handling /edit_casino from user ${msg.from.id}`);
        const casinoCommands = require('./casinoCommands');
        casinoCommands.handleEditCasinoCommand(bot, msg, text.match(editCasinoRegex));
    } else if (approveRegex.test(text)) {
        console.log(`‚úÖ Handling /odobri from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleApproveCommand(bot, msg, text.match(approveRegex));
    } else if (approvalsRegex.test(text)) {
        console.log(`üìã Handling /approvals from user ${msg.from.id}`);
        const adminCommands = require('./adminCommands');
        adminCommands.handleApprovalsCommand(bot, msg);
    } else if (referralRegex.test(text)) {
        console.log(`ü§ù Handling /referral from user ${msg.from.id}`);
        const referralCommands = require('./referralCommands');
        referralCommands.handleReferralCommand(bot, msg);
    } else {
        console.log(`‚ùì Unknown command: "${text}" from user ${msg.from.id}`);
    }
}

function handleApprovalRequest(bot, msg) {
    const username = msg.text.trim();
    const userId = msg.from.id;
    
    console.log(`üìã Approval request processing for user ${userId}: ${username}`);
    
    if (!username.startsWith('@') || username.length < 5) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username')
            .catch(error => console.error('Error sending validation message:', error.message));
    }

    const success = database.requestApproval(userId, username);
    if (success) {
        bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ.')
            .catch(error => console.error('Error sending success message:', error.message));
        
        const admins = config.ADMINS;
        admins.forEach(adminId => {
            if (isAdmin(adminId)) {
                bot.sendMessage(adminId,
                    `üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ!\nID: ${userId}\nUsername: ${username}\n/odobri_${userId}`
                ).catch(error => console.error(`Error notifying admin ${adminId}:`, error.message));
            }
        });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
            .catch(error => console.error('Error sending error message:', error.message));
    }
}

module.exports = {
    handleStartCommand,
    handleHelpCommand,
    handleMessage,
    handleApprovalRequest
};
