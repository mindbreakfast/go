const path = require('path');
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));
const logger = require(path.join(__dirname, '..', '..', 'utils', 'logger'));

function handleStartCommand(bot, msg) {
    const user = msg.from;
    
    database.trackUserAction(user.id, user, 'start');

    if (msg.text && msg.text.includes('giftme_')) {
        const contestId = msg.text.split(' ')[1];
        handleContestJoin(bot, msg, contestId);
        return;
    }

    if (msg.text && msg.text.includes('request_approval')) {
        database.requestApproval(user.id, user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω');
        bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.');
        return;
    }

    if (msg.text && msg.text.includes(' ')) {
        const referralCode = msg.text.split(' ')[1];
        if (referralCode.startsWith('ref')) {
            const referrerId = parseInt(referralCode.substring(3));
            if (!isNaN(referrerId) && referrerId !== user.id) {
                database.handleReferralStart(user.id, referrerId);
            }
        }
    }

    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: config.WEB_APP_URL }
                }
            ]]
        }
    };

    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ:', keyboard)
        .catch(error => console.error('Error sending welcome message:', error));
}

function handleContestJoin(bot, msg, contestId) {
    const user = msg.from;
    
    database.updateUserSettings(user.id, {
        contestState: {
            active: true,
            contestId: contestId,
            step: 'email'
        }
    });

    bot.sendMessage(msg.chat.id,
        `üéÅ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –≤ –∫–∞–∑–∏–Ω–æ:`
    );
}

function handleHelpCommand(bot, msg) {
    const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/casino_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ
/voice_audit - –ê—É–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã—Ö
/referral - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
/live [—Å—Å—ã–ª–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ù–∞—á–∞—Ç—å —Å—Ç—Ä–∏–º
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º
/text [—Å–æ–æ–±—â–µ–Ω–∏–µ] [—Ü–≤–µ—Ç] - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å
/clear_text - –û—á–∏—Å—Ç–∏—Ç—å –∞–Ω–æ–Ω—Å—ã
/list_text - –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–æ–Ω—Å—ã
/remove_text [ID] - –£–¥–∞–ª–∏—Ç—å –∞–Ω–æ–Ω—Å
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/add_casino - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∑–∏–Ω–æ
/list_casinos - –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/edit_casino [ID] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∑–∏–Ω–æ
/ref_stats - –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
    `.trim();

    bot.sendMessage(msg.chat.id, helpText);
}

function handleMessage(bot, msg) {
    const text = msg.text;
    if (!text) return;

    console.log('Processing message:', text);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text.startsWith('/')) {
        processCommand(bot, msg, text);
        return;
    }

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—É—Ä—Å—ã
    const userData = database.getUserData(msg.from.id);
    if (userData.settings?.contestState?.active) {
        handleContestResponse(bot, msg, text, userData.settings.contestState);
        return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –∫–æ–Ω–∫—É—Ä—Å - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    console.log('Ignoring non-command message:', text);
}

function processCommand(bot, msg, text) {
    const command = text.split(' ')[0].toLowerCase();

    switch (command) {
        case '/start':
            handleStartCommand(bot, msg);
            break;
        case '/help':
            handleHelpCommand(bot, msg);
            break;
        case '/stats':
            if (isAdmin(msg.from.id)) {
                const adminCommands = require('./adminCommands');
                adminCommands.handleStatsCommand(bot, msg);
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
            break;
        case '/casino_stats':
            if (isAdmin(msg.from.id)) {
                const adminCommands = require('./adminCommands');
                adminCommands.handleCasinoStatsCommand(bot, msg);
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
            break;
        case '/voice_audit':
            if (isAdmin(msg.from.id)) {
                const adminCommands = require('./adminCommands');
                adminCommands.handleVoiceAuditCommand(bot, msg);
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
            break;
        case '/text':
            if (isAdmin(msg.from.id)) {
                const adminCommands = require('./adminCommands');
                const messageText = text.substring(5).trim();
                const match = messageText.match(/^(.+?)(?:\s+(blue|green|red|yellow|purple))?$/);
                adminCommands.handleTextCommand(bot, msg, match ? [null, match[1], match[2]] : [null, messageText]);
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
            break;
        case '/live':
            if (isAdmin(msg.from.id)) {
                const adminCommands = require('./adminCommands');
                const params = text.substring(6).trim();
                const spaceIndex = params.indexOf(' ');
                if (spaceIndex > 0) {
                    const streamUrl = params.substring(0, spaceIndex);
                    const eventDescription = params.substring(spaceIndex + 1);
                    adminCommands.handleLiveCommand(bot, msg, [null, streamUrl, eventDescription]);
                } else {
                    bot.sendMessage(msg.chat.id, '‚ùå –§–æ—Ä–º–∞—Ç: /live [—Å—Å—ã–ª–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ]');
                }
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
            break;
        case '/stop':
            if (isAdmin(msg.from.id)) {
                const adminCommands = require('./adminCommands');
                adminCommands.handleStopCommand(bot, msg);
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
            break;
        case '/referral':
            const referralCommands = require('./referralCommands');
            referralCommands.handleReferralCommand(bot, msg);
            break;
        case '/ref_stats':
            if (isAdmin(msg.from.id)) {
                const referralCommands = require('./referralCommands');
                referralCommands.handleRefStatsCommand(bot, msg);
            } else {
                bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
            break;
        default:
            bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
    }
}

function handleContestResponse(bot, msg, text, contestState) {
    const user = msg.from;

    if (contestState.step === 'email') {
        database.updateUserSettings(user.id, {
            contestState: {
                ...contestState,
                step: 'screenshot',
                email: text
            }
        });

        bot.sendMessage(msg.chat.id, '‚úÖ –ü–æ—á—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞:');
    } else if (contestState.step === 'screenshot') {
        database.updateUserSettings(user.id, {
            contestState: null
        });

        bot.sendMessage(msg.chat.id, '‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º.');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        const admins = config.ADMINS;
        admins.forEach(adminId => {
            if (isAdmin(adminId)) {
                bot.sendMessage(adminId,
                    `üéÅ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å!\nID: ${user.id}\nUsername: @${user.username}\n–ü–æ—á—Ç–∞: ${contestState.email}`
                );
            }
        });
    }
}

function handleApprovalRequest(bot, msg) {
    const username = msg.text.trim();
    const userId = msg.from.id;
    
    if (!username.startsWith('@') || username.length < 5) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username');
    }

    const success = database.requestApproval(userId, username);
    if (success) {
        bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ.');
        
        const admins = config.ADMINS;
        admins.forEach(adminId => {
            if (isAdmin(adminId)) {
                bot.sendMessage(adminId,
                    `üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ!\nID: ${userId}\nUsername: ${username}\n/odobri_${userId}`
                );
            }
        });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
}

module.exports = {
    handleStartCommand,
    handleHelpCommand,
    handleMessage,
    handleApprovalRequest,
    handleContestJoin
};
