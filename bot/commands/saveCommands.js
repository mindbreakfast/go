const path = require('path');
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));
const logger = require(path.join(__dirname, '..', '..', 'utils', 'logger'));

async function handleSaveCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        // üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –û –ù–ê–ß–ê–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø
        const progressMsg = await bot.sendMessage(msg.chat.id, 'üíæ –ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Git...');

        // üî• –°–û–•–†–ê–ù–Ø–ï–ú –í–°–ï –î–ê–ù–ù–´–ï –õ–û–ö–ê–õ–¨–ù–û
        await bot.editMessageText('üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ...', {
            chat_id: msg.chat.id,
            message_id: progressMsg.message_id
        });

        const localSaveResult = await database.saveAllData();
        
        if (!localSaveResult) {
            throw new Error('–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }

        // üî• –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–ï–ú –° GIT
        await bot.editMessageText('üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é —Å GitHub...', {
            chat_id: msg.chat.id,
            message_id: progressMsg.message_id
        });

        const githubSync = require(path.join(__dirname, '..', '..', 'database', 'githubSync'));
        
        // üî• –°–û–•–†–ê–ù–Ø–ï–ú –ö–ê–ñ–î–´–ô –§–ê–ô–õ –û–¢–î–ï–õ–¨–ù–û –í GIT
        const filesToSave = [
            { name: 'data.json', data: JSON.stringify({
                casinos: database.getCasinos(),
                categories: database.getCategories(),
                lastUpdated: new Date().toISOString()
            }, null, 2) },
            { name: 'content.json', data: JSON.stringify({
                announcements: database.getAnnouncements(),
                streamStatus: database.getStreamStatus(),
                lastUpdated: new Date().toISOString()
            }, null, 2) },
            { name: 'userdata.json', data: JSON.stringify({
                userChats: Object.fromEntries(database.getUserChats()),
                userSettings: Object.fromEntries(database.getUserSettings()),
                giveaways: database.getGiveaways(),
                pendingApprovals: database.getPendingApprovals(),
                referralData: Object.fromEntries(database.getReferralData()),
                lastUpdated: new Date().toISOString()
            }, null, 2) },
            { name: 'stats.json', data: JSON.stringify({
                userClickStats: Object.fromEntries(database.getClickStats()),
                hiddenStats: Object.fromEntries(database.getHiddenStats()),
                voiceAccessLogs: database.getVoiceAccessLogs(),
                lastUpdated: new Date().toISOString()
            }, null, 2) }
        ];

        let successCount = 0;
        let errorCount = 0;

        for (const file of filesToSave) {
            try {
                await bot.editMessageText(`üìÅ –°–æ—Ö—Ä–∞–Ω—è—é ${file.name}...`, {
                    chat_id: msg.chat.id,
                    message_id: progressMsg.message_id
                });

                const result = await githubSync.saveDataToGitHub(file.data, file.name);
                
                if (result.success) {
                    successCount++;
                    logger.info(`File ${file.name} saved to GitHub`);
                } else {
                    errorCount++;
                    logger.error(`Failed to save ${file.name} to GitHub`);
                }

                // üî• –ù–ï–ë–û–õ–¨–®–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê –ú–ï–ñ–î–£ –§–ê–ô–õ–ê–ú–ò
                await new Promise(resolve => setTimeout(resolve, 500));

            } catch (error) {
                errorCount++;
                logger.error(`Error saving ${file.name}:`, error);
            }
        }

        // üî• –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        const resultMessage = `
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount} —Ñ–∞–π–ª–æ–≤
‚ùå –û—à–∏–±–æ–∫: ${errorCount} —Ñ–∞–π–ª–æ–≤
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

${errorCount > 0 ? '‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.' : 'üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!'}
        `.trim();

        await bot.editMessageText(resultMessage, {
            chat_id: msg.chat.id,
            message_id: progressMsg.message_id
        });

        logger.info('Manual save completed', { 
            adminId: msg.from.id, 
            successCount, 
            errorCount 
        });

    } catch (error) {
        logger.error('Error in save command:', error);
        
        // üî• –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try {
            await bot.sendMessage(msg.chat.id, 
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:\n${error.message}`
            );
        } catch (e) {
            logger.error('Failed to send error message:', e);
        }
    }
}

module.exports = {
    handleSaveCommand
};
