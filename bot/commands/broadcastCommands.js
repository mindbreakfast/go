const path = require('path');
const database = require(path.join(__dirname, '..', '..', 'database', 'database'));
const { isAdmin } = require(path.join(__dirname, '..', '..', 'utils', 'isAdmin'));
const logger = require(path.join(__dirname, '..', '..', 'utils', 'logger'));

async function handleBroadcastCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    try {
        const messageText = match[1];
        if (!messageText) {
            return bot.sendMessage(msg.chat.id, '‚ùå –§–æ—Ä–º–∞—Ç: /vsem [—Å–æ–æ–±—â–µ–Ω–∏–µ]');
        }

        const userChats = database.getUserChats();
        const totalUsers = userChats.size;
        let sentCount = 0;
        let failedCount = 0;

        // üî• –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ë–ï–ó –ü–†–ï–§–ò–ö–°–ê "–û–±—ä—è–≤–ª–µ–Ω–∏–µ:"
        const broadcastMessage = messageText;

        bot.sendMessage(msg.chat.id, `üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞...\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${totalUsers}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
        for (const [userId, userData] of userChats.entries()) {
            try {
                await bot.sendMessage(userId, broadcastMessage);
                sentCount++;
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ 100ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                if (sentCount % 10 === 0) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (sentCount % 20 === 0) {
                    bot.sendMessage(msg.chat.id, 
                        `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${sentCount}/${totalUsers} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`
                    ).catch(e => console.log('Progress update failed'));
                }
                
            } catch (error) {
                failedCount++;
                logger.warn('Failed to send broadcast to user', { 
                    userId, 
                    error: error.message 
                });
                
                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                if (error.response?.statusCode === 403) {
                    userChats.delete(userId);
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await database.saveUserData();

        const resultMessage = `
‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${totalUsers}
‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failedCount}
${failedCount > 0 ? '\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–æ—Ç–∞, —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞' : ''}
        `.trim();

        bot.sendMessage(msg.chat.id, resultMessage);

    } catch (error) {
        logger.error('Error in broadcast command:', error);
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
}

module.exports = {
    handleBroadcastCommand
};
