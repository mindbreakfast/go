const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const config = require(path.join(__dirname, '..', 'config'));
const { casinoEditingState, clearUserState } = require('./state');
const commandHandlers = require('./commands');

// –°–û–ó–î–ê–ï–ú –±–æ—Ç–∞ –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
const bot = new TelegramBot(config.BOT_TOKEN, { 
    polling: false // –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º autoStart
});

console.log('‚úÖ Bot instance created (polling NOT started)');

// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
bot.on('message', (msg) => {
    console.log('üì® Message received:', msg.text?.substring(0, 50), 'from user:', msg.from.id, 'chat:', msg.chat.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (casinoEditingState.has(msg.from.id)) {
        casinoEditingState.get(msg.from.id).lastActivity = Date.now();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ
    if (casinoEditingState.has(msg.from.id) && casinoEditingState.get(msg.from.id).step) {
        console.log('‚û°Ô∏è Routing to casino creation step handler');
        commandHandlers.handleCasinoCreationStep(bot, msg, casinoEditingState);
        return;
    }

    if (casinoEditingState.has(msg.from.id) && casinoEditingState.get(msg.from.id).editingCasinoId) {
        console.log('‚û°Ô∏è Routing to casino edit response handler');
        commandHandlers.handleCasinoEditResponse(bot, msg, casinoEditingState);
        return;
    }

    if (msg.text) {
        console.log('‚û°Ô∏è Routing to general message handler');
        commandHandlers.handleMessage(bot, msg);
    } else {
        console.log('‚ö†Ô∏è Non-text message received, ignoring');
    }
});

bot.on('callback_query', (query) => {
    console.log('üîò Callback query received:', query.data, 'from user:', query.from.id);
    commandHandlers.handleCallbackQuery(bot, query, casinoEditingState);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error.code, error.message);
    // ‚úÖ –£–ë–†–ê–ù –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ 409 –æ—à–∏–±–∫–µ
});

bot.on('error', (error) => {
    console.error('‚ùå General bot error:', error.message);
});

async function safeSendMessage(chatId, text, options = {}) {
    try {
        const result = await bot.sendMessage(chatId, text, options);
        console.log(`‚úÖ Message sent to ${chatId}, length: ${text.length}`);
        return { success: true, result };
    } catch (error) {
        if (error.response?.statusCode === 403) {
            console.log(`üë§ User ${chatId} blocked the bot`);
            return { success: false, reason: 'blocked' };
        } else {
            console.error(`‚ùå Error sending message to ${chatId}:`, error.message);
            return { success: false, reason: 'error', error };
        }
    }
}

async function startBot() {
    console.log('üöÄ Starting Telegram Bot with POLLING...');
    console.log('üîë Using BOT_TOKEN:', config.BOT_TOKEN ? config.BOT_TOKEN.substring(0, 10) + '...' : 'MISSING!');
    
    try {
        // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–ö–°: –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        console.log('‚è≥ Waiting 10 seconds to avoid session conflicts...');
        await new Promise(resolve => setTimeout(resolve, 10000));

        // üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –í–°–ï–• —Å–µ—Å—Å–∏–π
        try {
            console.log('üõë Force closing all sessions...');
            await bot.close();
        } catch (closeError) {
            console.log('‚ÑπÔ∏è Normal close failed, trying emergency cleanup...');
        }

        // üî• –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–æ–≤
        try {
            await bot.deleteWebHook({ drop_pending_updates: true });
            console.log('‚úÖ Webhook deleted with pending updates drop');
        } catch (webhookError) {
            console.log('‚ÑπÔ∏è Webhook delete failed:', webhookError.message);
        }

        // üî• –ï—â–µ –æ–¥–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        await new Promise(resolve => setTimeout(resolve, 5000));

        // üî• –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        console.log('üîÑ Starting fresh polling session...');
        await bot.startPolling({
            timeout: 30,
            limit: 1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            allowed_updates: ['message', 'callback_query'],
            drop_pending_updates: true // ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–ê–†–ê–ú–ï–¢–†
        });
        
        const me = await bot.getMe();
        console.log('‚úÖ Telegram Bot is running in POLLING mode');
        console.log('ü§ñ Bot username:', me.username);
        
        return { success: true, botInfo: me };
        
    } catch (error) {
        console.error('‚ùå FATAL: Cannot start bot:', error.message);
        
        // üî• –ù–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —ç—Ç–æ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ!
        console.log('üíÄ Bot startup failed completely. Manual intervention required.');
        
        throw error;
    }
}

async function stopBot() {
    try {
        console.log('üõë Stopping bot polling...');
        await bot.stopPolling();
        console.log('‚úÖ Bot polling stopped');
        return true;
    } catch (error) {
        console.error('‚ùå Error stopping bot:', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async function testBot() {
    try {
        const me = await bot.getMe();
        console.log('‚úÖ Bot test successful:', me.username);
        return { success: true, username: me.username };
    } catch (error) {
        console.error('‚ùå Bot test failed:', error.message);
        return { success: false, error: error.message };
    }
}

module.exports = {
    bot,
    startBot,
    stopBot,
    safeSendMessage,
    testBot
};
