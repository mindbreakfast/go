const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const config = require(path.join(__dirname, '..', 'config'));
const { casinoEditingState, clearUserState } = require('./state');
const commandHandlers = require('./commands');

// –°–û–ó–î–ê–ï–ú –±–æ—Ç–∞ –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
const bot = new TelegramBot(config.BOT_TOKEN, { 
    polling: false // –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º autoStart
});

console.log('‚úÖ Bot instance created (polling NOT started)');

// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
bot.on('message', (msg) => {
    console.log('üì® Message received:', msg.text?.substring(0, 50), 'from user:', msg.from.id, 'chat:', msg.chat.id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (casinoEditingState.has(msg.from.id)) {
        casinoEditingState.get(msg.from.id).lastActivity = Date.now();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ
    if (casinoEditingState.has(msg.from.id) && casinoEditingState.get(msg.from.id).step) {
        console.log('‚û°Ô∏è Routing to casino creation step handler');
        commandHandlers.handleCasinoCreationStep(bot, msg, casinoEditingState);
        return;
    }

    if (casinoEditingState.has(msg.from.id) && casinoEditingState.get(msg.from.id).editingCasinoId) {
        console.log('‚û°Ô∏è Routing to casino edit response handler');
        commandHandlers.handleCasinoEditResponse(bot, msg, casinoEditingState);
        return;
    }

    if (msg.text) {
        console.log('‚û°Ô∏è Routing to general message handler');
        commandHandlers.handleMessage(bot, msg);
    } else {
        console.log('‚ö†Ô∏è Non-text message received, ignoring');
    }
});

bot.on('callback_query', (query) => {
    console.log('üîò Callback query received:', query.data, 'from user:', query.from.id);
    commandHandlers.handleCallbackQuery(bot, query, casinoEditingState);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error.code, error.message);
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
});

bot.on('error', (error) => {
    console.error('‚ùå General bot error:', error.message);
});

async function safeSendMessage(chatId, text, options = {}) {
    try {
        const result = await bot.sendMessage(chatId, text, options);
        console.log(`‚úÖ Message sent to ${chatId}, length: ${text.length}`);
        return { success: true, result };
    } catch (error) {
        if (error.response?.statusCode === 403) {
            console.log(`üë§ User ${chatId} blocked the bot`);
            return { success: false, reason: 'blocked' };
        } else {
            console.error(`‚ùå Error sending message to ${chatId}:`, error.message);
            return { success: false, reason: 'error', error };
        }
    }
}

async function startBot() {
    console.log('üöÄ Starting Telegram Bot with POLLING...');
    console.log('üîë Using BOT_TOKEN:', config.BOT_TOKEN ? config.BOT_TOKEN.substring(0, 10) + '...' : 'MISSING!');
    console.log('üåê Webhook URL would be:', config.RENDER_URL + '/webhook');
    
    try {
        // üî• –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –°–ï–°–°–ò–ô
        try {
            console.log('üõë Attempting to close all active sessions...');
            // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
            await bot.close();
            console.log('‚úÖ Bot instance closed successfully');
        } catch (closeError) {
            console.log('‚ÑπÔ∏è Close method failed, trying logOut...');
            try {
                await bot.logOut();
                console.log('‚úÖ Successfully logged out from all sessions');
            } catch (logoutError) {
                console.log('‚ö†Ô∏è Both close and logOut failed, continuing...');
            }
        }

        // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–µ–±—Ö—É–∫ –æ—Ç–∫–ª—é—á–µ–Ω
        try {
            await bot.deleteWebHook();
            console.log('‚úÖ Webhook deleted (if existed)');
        } catch (error) {
            console.log('‚ÑπÔ∏è No webhook to delete or error:', error.message);
        }
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –Ø–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º polling
        console.log('üîÑ Starting polling...');
        await bot.startPolling({ 
            timeout: 10,
            limit: 100,
            allowed_updates: ['message', 'callback_query']
        });
        
        const me = await bot.getMe();
        console.log('‚úÖ Telegram Bot is running in POLLING mode');
        console.log('ü§ñ Bot username:', me.username);
        console.log('üìä Bot state users:', casinoEditingState.size);
        
        return { success: true, botInfo: me };
    } catch (error) {
        console.error('‚ùå Error starting bot:', error.message);
        console.error('‚ùå Error details:', JSON.stringify(error, null, 2));
        
        // –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ 409
        if (error.message.includes('409')) {
            console.log('üîÑ Restarting bot in 5 seconds due to 409 conflict...');
            setTimeout(startBot, 5000);
        }
        
        throw error;
    }
}

async function stopBot() {
    try {
        console.log('üõë Stopping bot polling...');
        await bot.stopPolling();
        console.log('‚úÖ Bot polling stopped');
        return true;
    } catch (error) {
        console.error('‚ùå Error stopping bot:', error.message);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async function testBot() {
    try {
        const me = await bot.getMe();
        console.log('‚úÖ Bot test successful:', me.username);
        return { success: true, username: me.username };
    } catch (error) {
        console.error('‚ùå Bot test failed:', error.message);
        return { success: false, error: error.message };
    }
}

module.exports = {
    bot,
    startBot,
    stopBot,
    safeSendMessage,
    testBot
};
