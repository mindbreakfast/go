const config = require('../config');
const database = require('../database/database');

// ===== –ö–û–ù–°–¢–ê–ù–¢–´ =====
const ADD_CASINO_STEPS = {
    NAME: 'name',
    PROMOCODE: 'promocode',
    SHORT_DESC: 'short_desc',
    FULL_DESC: 'full_desc',
    URL: 'url',
    CATEGORY: 'category',
    KEYWORDS: 'keywords',
    CONFIRM: 'confirm'
};

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
function isAdmin(userId) {
    return config.ADMINS.includes(Number(userId));
}

function getNextCasinoId() {
    const casinos = database.getCasinos();
    return casinos.length > 0 ? Math.max(...casinos.map(c => c.id)) + 1 : 1;
}

function getCasino(id) {
    return database.getCasinos().find(c => c.id === id);
}

// ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
function handleStartCommand(bot, msg) {
    const user = msg.from;
    database.trackUserAction(user.id, user, 'start');


    if (msg.text && msg.text.includes('request_approval')) {
    database.requestApproval(user.id, user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω');
    bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.');
    return;
}



    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if (msg.text && msg.text.includes(' ')) {
        const referralCode = msg.text.split(' ')[1];
        if (referralCode.startsWith('ref')) {
            const referrerId = parseInt(referralCode.substring(3));
            if (!isNaN(referrerId) && referrerId !== user.id) {
                database.handleReferralStart(user.id, referrerId);
                console.log(`User ${user.id} was referred by ${referrerId}`);
            }
        }
    }

    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: config.WEB_APP_URL }
                }
            ]]
        }
    };

    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ:', keyboard);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
function handleHelpCommand(bot, msg) {
    const helpText = `
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:
/live [—Å—Å—ã–ª–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ù–∞—á–∞—Ç—å —Å—Ç—Ä–∏–º
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º
/text [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å
/clear_text - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/list_text - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/remove_text [ID] - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–æ–Ω—Å
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
/add_casino - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∑–∏–Ω–æ
/list_casinos - –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/edit_casino [ID] - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∑–∏–Ω–æ

–ü—Ä–∏–º–µ—Ä—ã:
/live https://twitch.tv –ú–æ–π –∫—Ä—É—Ç–æ–π —Å—Ç—Ä–∏–º
/text —Ü–≤–µ—Ç:green üéâ –ë–æ–Ω—É—Å 200%!
/remove_text 123456789
    `;

    bot.sendMessage(msg.chat.id, helpText);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
function handleStatsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const userChats = database.getUserChats();
    const streamStatus = database.getStreamStatus();
    const announcements = database.getAnnouncements();
    const casinos = database.getCasinos();

    bot.sendMessage(msg.chat.id,
        `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChats.size}\n` +
        `–°—Ç—Ä–∏–º: ${streamStatus.isStreamLive ? '–í –≠–§–ò–†–ï' : '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `–ê–Ω–æ–Ω—Å–æ–≤: ${announcements.length}\n` +
        `–ö–∞–∑–∏–Ω–æ: ${casinos.length}\n` +
        `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}`
    );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /live
function handleLiveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const streamUrl = match[1];
    const eventDescription = match[2];

    database.setStreamStatus({
        isStreamLive: true,
        streamUrl: streamUrl,
        eventDescription: eventDescription,
        lastUpdated: new Date().toISOString()
    });

    database.saveData().then(success => {
        bot.sendMessage(msg.chat.id, success ?
            `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${streamUrl}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${eventDescription}` :
            '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞'
        );
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
function handleStopCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    database.setStreamStatus({
        isStreamLive: false,
        streamUrl: '',
        eventDescription: '',
        lastUpdated: new Date().toISOString()
    });

    database.saveData().then(success => {
        bot.sendMessage(msg.chat.id, success ?
            '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' :
            '‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∏–º–∞'
        );
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /text
function handleTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    let text = match[1];
    let color = 'blue';

    const colorMatch = text.match(/—Ü–≤–µ—Ç:(\w+)\s+/i);
    if (colorMatch) {
        color = colorMatch[1];
        text = text.replace(colorMatch[0], '');
    }

    const announcements = database.getAnnouncements();
    const newAnnouncement = {
        id: Date.now(),
        text: text,
        color: color,
        createdAt: new Date().toISOString()
    };
    announcements.push(newAnnouncement);
    database.setAnnouncements(announcements);

    database.saveData().then(() => {
        bot.sendMessage(msg.chat.id,
            `‚úÖ –ê–Ω–æ–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω!\nID: ${newAnnouncement.id}\n–¶–≤–µ—Ç: ${color}\n–¢–µ–∫—Å—Ç: ${text}`
        );
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_text
function handleClearTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    database.setAnnouncements([]);
    database.saveData().then(() => {
        bot.sendMessage(msg.chat.id, '‚úÖ –í—Å–µ –∞–Ω–æ–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã!');
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_text
function handleListTextCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const announcements = database.getAnnouncements();
    if (announcements.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ –ø—É—Å—Ç');
    }

    const announcementList = announcements.map(a =>
        `ID: ${a.id}\n–¶–≤–µ—Ç: ${a.color}\n–¢–µ–∫—Å—Ç: ${a.text}\n–î–∞—Ç–∞: ${new Date(a.createdAt).toLocaleString('ru-RU')}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
    ).join('\n');

    bot.sendMessage(msg.chat.id,
        `–°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ (${announcements.length}):\n\n${announcementList}`
    );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /remove_text
function handleRemoveTextCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const id = parseInt(match[1]);
    const announcements = database.getAnnouncements();
    const index = announcements.findIndex(a => a.id === id);

    if (index !== -1) {
        const removed = announcements.splice(index, 1)[0];
        database.setAnnouncements(announcements);
        database.saveData().then(() => {
            bot.sendMessage(msg.chat.id,
                `‚úÖ –ê–Ω–æ–Ω—Å —É–¥–∞–ª–µ–Ω!\nID: ${id}\n–¢–µ–∫—Å—Ç: ${removed.text}`
            );
        });
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ê–Ω–æ–Ω—Å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /broadcast
async function handleBroadcastCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const message = match[1];
    const userChats = database.getUserChats();
    let successCount = 0;
    let errorCount = 0;

    bot.sendMessage(msg.chat.id, `üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${userChats.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);

    for (const [userId] of userChats) {
        try {
            await bot.sendMessage(userId, `üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï:\n\n${message}`);
            successCount++;
            await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
            errorCount++;
        }
    }

    bot.sendMessage(msg.from.id,
        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
        `‚úì –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
        `‚úó –û—à–∏–±–æ–∫: ${errorCount}`
    );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_casino
function handleAddCasinoCommand(bot, msg, casinoEditingState) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const response = startCasinoCreation(msg.from.id, casinoEditingState);
    bot.sendMessage(msg.chat.id, response);
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ
function startCasinoCreation(userId, casinoEditingState) {
    casinoEditingState.set(userId, {
        step: ADD_CASINO_STEPS.NAME,
        data: {}
    });
    return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∑–∏–Ω–æ:';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ
async function handleCasinoCreationStep(bot, msg, casinoEditingState) {
    const state = casinoEditingState.get(msg.from.id);
    if (!state) return;

    let response = null;

    switch (state.step) {
        case ADD_CASINO_STEPS.NAME:
            state.data.name = msg.text;
            state.step = ADD_CASINO_STEPS.PROMOCODE;
            response = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:';
            break;

        case ADD_CASINO_STEPS.PROMOCODE:
            state.data.promocode = msg.text;
            state.step = ADD_CASINO_STEPS.SHORT_DESC;
            response = '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:';
            break;

        case ADD_CASINO_STEPS.SHORT_DESC:
            state.data.shortDescription = msg.text;
            state.step = ADD_CASINO_STEPS.FULL_DESC;
            response = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):';
            break;

        case ADD_CASINO_STEPS.FULL_DESC:
            state.data.fullDescription = msg.text === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? '' : msg.text;
            state.step = ADD_CASINO_STEPS.URL;
            response = '–í–≤–µ–¥–∏—Ç–µ URL —Å—Å—ã–ª–∫—É:';
            break;

        case ADD_CASINO_STEPS.URL:
            state.data.url = msg.text;
            state.step = ADD_CASINO_STEPS.CATEGORY;
            const categoriesList = config.CATEGORIES.map(c => `${c.id} - ${c.name}`).join('\n');
            response = `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n${categoriesList}`;
            break;

        case ADD_CASINO_STEPS.CATEGORY:
            state.data.category = msg.text;
            state.step = ADD_CASINO_STEPS.KEYWORDS;
            response = '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):';
            break;

        case ADD_CASINO_STEPS.KEYWORDS:
            state.data.hiddenKeywords = msg.text === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' ? [] : msg.text.split(',').map(k => k.trim());
            state.step = ADD_CASINO_STEPS.CONFIRM;

            response = `
–ù–∞–∑–≤–∞–Ω–∏–µ: ${state.data.name}
–ü—Ä–æ–º–æ–∫–æ–¥: ${state.data.promocode}
–û–ø–∏—Å–∞–Ω–∏–µ: ${state.data.shortDescription}
–°—Å—ã–ª–∫–∞: ${state.data.url}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${state.data.category}
–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${state.data.hiddenKeywords.join(', ')}

–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ "–¥–∞", –¥–ª—è –æ—Ç–º–µ–Ω—ã "–Ω–µ—Ç"`;
            break;

        case ADD_CASINO_STEPS.CONFIRM:
            if (msg.text.toLowerCase() === '–¥–∞') {
                const casinos = database.getCasinos();
                const newCasino = {
                    id: getNextCasinoId(),
                    ...state.data,
                    isActive: true,
                    isPinned: false,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                };
                casinos.push(newCasino);
                database.setCasinos(casinos);

                await database.saveData();
                casinoEditingState.delete(msg.from.id);
                response = `‚úÖ –ö–∞–∑–∏–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ID: ${newCasino.id}`;
            } else {
                casinoEditingState.delete(msg.from.id);
                response = '‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ';
            }
            break;
    }

    if (response) {
        bot.sendMessage(msg.chat.id, response);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_casinos
async function handleListCasinosCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const casinos = database.getCasinos();
    if (casinos.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ –ø—É—Å—Ç');
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 10 –∫–∞–∑–∏–Ω–æ
    const chunkSize = 10;
    for (let i = 0; i < casinos.length; i += chunkSize) {
        const chunk = casinos.slice(i, i + chunkSize);
        const casinoList = chunk.map(c =>
            `üé∞ ID: ${c.id} - ${c.name}\nüé´ –ü—Ä–æ–º–æ: ${c.promocode}\nüè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${c.category}\nüîó ${c.url}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
        ).join('\n');

        const message = i === 0 ?
            `üìù –°–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ (${casinos.length}):\n\n${casinoList}` :
            `–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ (${i+1}-${Math.min(i+chunkSize, casinos.length)}):\n\n${casinoList}`;

        await bot.sendMessage(msg.chat.id, message);
        await new Promise(resolve => setTimeout(resolve, 100));
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit_casino
function handleEditCasinoCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–∞!');
    }

    const id = parseInt(match[1]);
    const casino = getCasino(id);

    if (!casino) {
        return bot.sendMessage(msg.chat.id, `‚ùå –ö–∞–∑–∏–Ω–æ —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_name_${id}` },
                    { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: `edit_promo_${id}` }
                ],
                [
                    { text: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_desc_${id}` },
                    { text: 'üîó –°—Å—ã–ª–∫–∞', callback_data: `edit_url_${id}` }
                ],
                [
                    { text: 'üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data: `edit_category_${id}` },
                    { text: 'üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å', callback_data: `pin_${id}` },
                    { text: 'üëª –°–∫—Ä—ã—Ç—å', callback_data: `hide_${id}` }
                ],
                [
                    { text: 'üö´ –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_${id}` }
                ]
            ]
        }
    };

    bot.sendMessage(msg.chat.id,
        `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${casino.name} (ID: ${casino.id})\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
        keyboard
    ).catch(error => {
        console.log('Error with keyboard:', error);
        bot.sendMessage(msg.chat.id,
            `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${casino.name} (ID: ${casino.id})\n–ö–Ω–æ–ø–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n/edit_name_${id}\n/edit_promo_${id} –∏ —Ç.–¥.`
        );
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
async function handleCallbackQuery(bot, query, casinoEditingState) {
    const chatId = query.message.chat.id;
    const data = query.data;

    try {
        if (data.startsWith('edit_')) {
            const [action, id] = data.split('_').slice(1);
            const casinoId = parseInt(id);

            casinoEditingState.set(chatId, {
                editingCasinoId: casinoId,
                editingField: action
            });

            const fieldNames = {
                name: '–Ω–∞–∑–≤–∞–Ω–∏–µ',
                promo: '–ø—Ä–æ–º–æ–∫–æ–¥',
                desc: '–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                url: 'URL —Å—Å—ã–ª–∫—É',
                category: '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
            };

            await bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${fieldNames[action]}:`);
        }
        else if (data.startsWith('delete_')) {
            const casinoId = parseInt(data.split('_')[1]);
            const casinos = database.getCasinos();
            const index = casinos.findIndex(c => c.id === casinoId);

            if (index !== -1) {
                const deleted = casinos.splice(index, 1)[0];
                database.setCasinos(casinos);
                await database.saveData();
                await bot.sendMessage(chatId, `‚úÖ –ö–∞–∑–∏–Ω–æ "${deleted.name}" —É–¥–∞–ª–µ–Ω–æ!`);
            } else {
                await bot.sendMessage(chatId, '‚ùå –ö–∞–∑–∏–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        }
        else if (data.startsWith('pin_')) {
            const casinoId = parseInt(data.split('_')[1]);
            const casino = getCasino(casinoId);
            const casinos = database.getCasinos();
            const index = casinos.findIndex(c => c.id === casinoId);

            if (index !== -1) {
                casinos[index].isPinned = !casinos[index].isPinned;
                database.setCasinos(casinos);
                await database.saveData();
                await bot.sendMessage(chatId,
                    `‚úÖ –ö–∞–∑–∏–Ω–æ "${casinos[index].name}" ${casinos[index].isPinned ? '–∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ' : '–æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ'}!`
                );
            }
        }
        else if (data.startsWith('hide_')) {
            const casinoId = parseInt(data.split('_')[1]);
            const casinos = database.getCasinos();
            const index = casinos.findIndex(c => c.id === casinoId);

            if (index !== -1) {
                casinos[index].isActive = false;
                database.setCasinos(casinos);
                await database.saveData();
                await bot.sendMessage(chatId, `‚úÖ –ö–∞–∑–∏–Ω–æ "${casinos[index].name}" —Å–∫—Ä—ã—Ç–æ!`);
            }
        }

        await bot.answerCallbackQuery(query.id);
    } catch (error) {
        console.error('Callback error:', error);
        await bot.answerCallbackQuery(query.id, { text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ
async function handleCasinoEditResponse(bot, msg, casinoEditingState) {
    const state = casinoEditingState.get(msg.from.id);
    if (!state || !state.editingCasinoId) return;

    const casino = getCasino(state.editingCasinoId);
    if (!casino) {
        casinoEditingState.delete(msg.from.id);
        return bot.sendMessage(msg.from.id, '‚ùå –ö–∞–∑–∏–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    const casinos = database.getCasinos();
    const index = casinos.findIndex(c => c.id === state.editingCasinoId);
    if (index === -1) {
        casinoEditingState.delete(msg.from.id);
        return bot.sendMessage(msg.from.id, '‚ùå –ö–∞–∑–∏–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    const updates = {};
    switch (state.editingField) {
        case 'name': updates.name = msg.text; break;
        case 'promo': updates.promocode = msg.text; break;
        case 'desc': updates.shortDescription = msg.text; break;
        case 'url': updates.url = msg.text; break;
        case 'category': updates.category = msg.text; break;
    }

    casinos[index] = { ...casinos[index], ...updates, updatedAt: new Date().toISOString() };
    database.setCasinos(casinos);

    await database.saveData();
    casinoEditingState.delete(msg.from.id);

    bot.sendMessage(msg.from.id, `‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
}

// –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
function handleMessage(bot, msg) {
    const approveRegex = /^\/odobri (\d+)$/;
const approvalsRegex = /^\/approvals$/;
    const text = msg.text;

    // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥
    const statsRegex = /^\/stats$/;
    const liveRegex = /^\/live (.+?) (.+)/;
    const stopRegex = /^\/stop$/;
    const textRegex = /^\/text (.+)/;
    const clearTextRegex = /^\/clear_text$/;
    const listTextRegex = /^\/list_text$/;
    const removeTextRegex = /^\/remove_text (\d+)/;
    const broadcastRegex = /^\/broadcast (.+)/;
    const addCasinoRegex = /^\/add_casino$/;
    const listCasinosRegex = /^\/list_casinos$/;
    const editCasinoRegex = /^\/edit_casino (\d+)/;
if (database.getUserChats().get(msg.from.id)?.waitingForApproval) {
    handleApprovalRequest(bot, msg);
    return;
}
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if (statsRegex.test(text)) {
        handleStatsCommand(bot, msg);
    } else if (liveRegex.test(text)) {
        handleLiveCommand(bot, msg, text.match(liveRegex));
    } else if (stopRegex.test(text)) {
        handleStopCommand(bot, msg);
    } else if (textRegex.test(text)) {
        handleTextCommand(bot, msg, text.match(textRegex));
    } else if (clearTextRegex.test(text)) {
        handleClearTextCommand(bot, msg);
    } else if (listTextRegex.test(text)) {
        handleListTextCommand(bot, msg);
    } else if (removeTextRegex.test(text)) {
        handleRemoveTextCommand(bot, msg, text.match(removeTextRegex));
    } else if (broadcastRegex.test(text)) {
        handleBroadcastCommand(bot, msg, text.match(broadcastRegex));
    } else if (addCasinoRegex.test(text)) {
        handleAddCasinoCommand(bot, msg, casinoEditingState);
    } else if (listCasinosRegex.test(text)) {
        handleListCasinosCommand(bot, msg);
    } else if (editCasinoRegex.test(text)) {
        handleEditCasinoCommand(bot, msg, text.match(editCasinoRegex));
    } else if (approveRegex.test(text)) {
    handleApproveCommand(bot, msg, text.match(approveRegex));
} else if (approvalsRegex.test(text)) {
    handleApprovalsCommand(bot, msg);
}
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /odobri
function handleApproveCommand(bot, msg, match) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const userId = parseInt(match[1]);
    const success = database.approveUser(userId);
    
    if (success) {
        bot.sendMessage(msg.chat.id, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∞–π–≤ –∫–æ–º–Ω–∞—Ç–µ!`);
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.sendMessage(userId, 'üéâ –í–∞—à –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –ª–∞–π–≤ –∫–æ–º–Ω–∞—Ç–µ –æ–¥–æ–±—Ä–µ–Ω! –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
    } else {
        bot.sendMessage(msg.chat.id, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /approvals
function handleApprovalsCommand(bot, msg) {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }

    const pending = database.getPendingApprovals();
    if (pending.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üìù –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –Ω–µ—Ç');
    }

    const approvalList = pending.map(req => 
        `ID: ${req.userId}\nUsername: @${req.requestedUsername}\n–ó–∞–ø—Ä–æ—Å–∏–ª: ${new Date(req.requestedAt).toLocaleString('ru-RU')}\n/odobri_${req.userId}`
    ).join('\n\n');

    bot.sendMessage(msg.chat.id,
        `–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (${pending.length}):\n\n${approvalList}`
    );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è
function handleApprovalRequest(bot, msg) {
    const username = msg.text.trim();
    const userId = msg.from.id;
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è username
    if (!username.startsWith('@') || username.length < 5) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username');
    }

    const success = database.requestApproval(userId, username);
    if (success) {
        bot.sendMessage(msg.chat.id, '‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º! –û–∂–∏–¥–∞–π—Ç–µ.');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        const admins = config.ADMINS;
        admins.forEach(adminId => {
            bot.sendMessage(adminId,
                `üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ!\nID: ${userId}\nUsername: ${username}\n/odobri_${userId}`
            );
        });
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
function handleReferralCommand(bot, msg) {
    const userId = msg.from.id;
    const referralInfo = database.getReferralInfo(userId);
    
    const message = `
üìä –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë• –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª: ${referralInfo.referredBy ? 'User#' + referralInfo.referredBy : '–ù–∏–∫—Ç–æ'}
üìà –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: ${referralInfo.referrals.length} —á–µ–ª–æ–≤–µ–∫

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
${referralInfo.referralLink}

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!`;
    
    bot.sendMessage(msg.chat.id, message);
}

// –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ handleMessage
const referralRegex = /^\/referral$/;

// –ò –ø—Ä–æ–≤–µ—Ä–∫—É –≤ handleMessage
 else if (referralRegex.test(text)) {
    handleReferralCommand(bot, msg);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
module.exports = {
    handleStartCommand,
    handleHelpCommand,
    handleStatsCommand,
    handleLiveCommand,
    handleStopCommand,
    handleTextCommand,
    handleClearTextCommand,
    handleListTextCommand,
    handleRemoveTextCommand,
    handleBroadcastCommand,
    handleAddCasinoCommand,
    handleListCasinosCommand,
    handleEditCasinoCommand,
    handleCallbackQuery,
    handleCasinoEditResponse,
    handleCasinoCreationStep,
    handleMessage
};
