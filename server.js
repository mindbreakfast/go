const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs').promises;

const app = express();
const PORT = process.env.PORT || 3000;

// ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
const TOKEN = process.env.BOT_TOKEN || '8368808338:AAF25l680ekIKpzQyvDj9pKc2zByrJx9dII';
const ADMINS = [1777213824];
// ===================

const bot = new TelegramBot(TOKEN, { 
    polling: true,
    onlyFirstMatch: true
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
function isAdmin(userId) {
    return ADMINS.includes(Number(userId));
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞
async function updateStreamStatus(isLive, streamUrl = '') {
    try {
        const statusData = {
            isStreamLive: isLive,
            streamUrl: streamUrl,
            lastUpdated: new Date().toISOString()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (Render –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É)
        await fs.writeFile('status.json', JSON.stringify(statusData, null, 2));
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', statusData);
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        return false;
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /start –æ—Ç:', msg.from.id);
    
    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: 'https://gogo-kohl-beta.vercel.app' }
                }
            ]]
        }
    };
    
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', keyboard)
        .catch(error => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error));
});

// –ö–æ–º–∞–Ω–¥–∞ /live
bot.onText(/\/live (.+)/, async (msg, match) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /live –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const streamUrl = match[1];
    const success = await updateStreamStatus(true, streamUrl);
    
    if (success) {
        bot.sendMessage(msg.chat.id, `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω: ${streamUrl}`);
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.onText(/\/stop/, async (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /stop –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const success = await updateStreamStatus(false);
    
    if (success) {
        bot.sendMessage(msg.chat.id, '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } else {
        bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
    }
});

// –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
app.get('/', (req, res) => {
    res.send(`
        <h1>CasinoHub Bot Server</h1>
        <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –¢–æ–∫–µ–Ω: ${TOKEN ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
        <p>–ê–¥–º–∏–Ω—ã: ${ADMINS.join(', ')}</p>
        <p><a href="https://t.me/your_bot_username">–ù–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É</a></p>
    `);
});

// –ù–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞
app.get('/status', async (req, res) => {
    try {
        const statusData = await fs.readFile('status.json', 'utf8');
        res.json(JSON.parse(statusData));
    } catch (error) {
        res.json({ isStreamLive: false, streamUrl: '' });
    }
});

app.listen(PORT, () => {
    console.log(`üöÄ Server started on port ${PORT}`);
    console.log(`ü§ñ Bot token: ${TOKEN ? 'SET' : 'MISSING'}`);
    console.log(`üëë Admins: ${ADMINS.join(', ')}`);
});
