const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const fs = require('fs').promises;

const app = express();
const PORT = process.env.PORT || 3000;

// ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
const TOKEN = process.env.BOT_TOKEN || '8368808338:AAFQswtEUrguFKjLajbqRTKvUpsQypoWZ8k';
const ADMINS = [1777213824];
const WEB_APP_URL = 'https://gogo-kohl-beta.vercel.app';
// ===================

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –æ–ø—Ü–∏—è–º–∏
const bot = new TelegramBot(TOKEN, {
    polling: {
        interval: 300,
        autoStart: false,
        params: {
            timeout: 10,
            limit: 1
        }
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
function isAdmin(userId) {
    return ADMINS.includes(Number(userId));
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞
async function updateStreamStatus(isLive, streamUrl = '') {
    try {
        const statusData = {
            isStreamLive: isLive,
            streamUrl: streamUrl,
            lastUpdated: new Date().toISOString()
        };
        
        await fs.writeFile('status.json', JSON.stringify(statusData, null, 2));
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        return false;
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /start –æ—Ç:', msg.from.id);
    
    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: WEB_APP_URL }
                }
            ]]
        }
    };
    
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', keyboard)
        .catch(error => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error));
});

// –ö–æ–º–∞–Ω–¥–∞ /live
bot.onText(/\/live (.+)/, async (msg, match) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /live –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const streamUrl = match[1];
    const success = await updateStreamStatus(true, streamUrl);
    
    bot.sendMessage(msg.chat.id, success ? 
        `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω: ${streamUrl}` : 
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.onText(/\/stop/, async (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /stop –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const success = await updateStreamStatus(false);
    bot.sendMessage(msg.chat.id, success ? 
        '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    );
});

// –í–µ–±-—Å–µ—Ä–≤–µ—Ä
app.get('/', (req, res) => {
    res.send('CasinoHub Bot Server is running!');
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/status', async (req, res) => {
    try {
        const statusData = await fs.readFile('status.json', 'utf8');
        res.json(JSON.parse(statusData));
    } catch (error) {
        res.json({ isStreamLive: false, streamUrl: '' });
    }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function startBot() {
    try {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await bot.closeWebHook();
        console.log('‚úÖ –°—Ç–∞—Ä—ã–µ webhooks –∑–∞–∫—Ä—ã—Ç—ã');
        
        // –ñ–¥–µ–º —Å–µ–∫—É–Ω–¥—É
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await bot.startPolling();
        console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        app.listen(PORT, () => {
            console.log(`üöÄ Server started on port ${PORT}`);
            console.log(`ü§ñ Bot token: ${TOKEN ? 'SET' : 'MISSING'}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(startBot, 5000);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
startBot();
