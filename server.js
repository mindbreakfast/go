const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
const TOKEN = process.env.BOT_TOKEN || '8368808338:AAECcdNDbVJkwlgTlXV_aVnhxrG3wdKRW2A';
const ADMINS = [1777213824];
const WEB_APP_URL = 'https://gogo-kohl-beta.vercel.app';
// ===================

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –∑–∞–ø—Ä–æ—Å—ã
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    next();
});

const bot = new TelegramBot(TOKEN, { 
    polling: {
        interval: 300,
        timeout: 10,
        limit: 100
    }
});

// –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å –≤ –ø–∞–º—è—Ç–∏ –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞
let streamStatus = {
    isStreamLive: false,
    streamUrl: '',
    eventDescription: '',
    lastUpdated: new Date().toISOString()
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
function isAdmin(userId) {
    return ADMINS.includes(Number(userId));
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞ (–≤ –ø–∞–º—è—Ç–∏)
async function updateStreamStatus(isLive, streamUrl = '', eventDescription = '') {
    try {
        streamStatus = {
            isStreamLive: isLive,
            streamUrl: streamUrl,
            eventDescription: eventDescription,
            lastUpdated: new Date().toISOString()
        };
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', streamStatus);
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        return false;
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /start –æ—Ç:', msg.from.id);
    
    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: WEB_APP_URL }
                }
            ]]
        }
    };
    
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', keyboard)
        .catch(error => console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error));
});

// –ö–æ–º–∞–Ω–¥–∞ /live - —Ç–µ–ø–µ—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
bot.onText(/\/live (.+) (.+)/, async (msg, match) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /live –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const streamUrl = match[1]; // –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —Å—Å—ã–ª–∫–∞
    const eventDescription = match[2]; // –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–ø–∏—Å–∞–Ω–∏–µ
    
    const success = await updateStreamStatus(true, streamUrl, eventDescription);
    
    bot.sendMessage(msg.chat.id, success ? 
        `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${streamUrl}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${eventDescription}` : 
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.onText(/\/stop/, async (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /stop –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const success = await updateStreamStatus(false, '', '');
    bot.sendMessage(msg.chat.id, success ? 
        '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
bot.onText(/\/add (.+)/, async (msg, match) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /add –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–∑–∏–Ω–æ
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    bot.sendMessage(msg.chat.id, 'üìù –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–∑–∏–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.');
});

// –ö–æ–º–∞–Ω–¥–∞ /remove - —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
bot.onText(/\/remove (.+)/, async (msg, match) => {
    console.log('–ü–æ–ª—É—á–µ–Ω /remove –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const casinoId = match[1];
    bot.sendMessage(msg.chat.id, `üóëÔ∏è –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∑–∏–Ω–æ ID: ${casinoId} –ø—Ä–∏–Ω—è—Ç–∞. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`);
});

// –í–µ–±-—Å–µ—Ä–≤–µ—Ä
app.get('/', (req, res) => {
    res.send('CasinoHub Bot Server is running!');
});

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/status', (req, res) => {
    res.json(streamStatus);
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ
app.get('/casino-data', async (req, res) => {
    try {
        const fs = require('fs').promises;
        const data = await fs.readFile('data_default.json', 'utf8');
        res.json(JSON.parse(data));
    } catch (error) {
        res.json({ casinos: [], categories: [] });
    }
});

// Endpoint –¥–ª—è debug
app.get('/debug-status', (req, res) => {
    res.json({
        status: streamStatus,
        memoryUsage: process.memoryUsage(),
        uptime: process.uptime()
    });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
    console.log('===================================');
    console.log('üöÄ CasinoHub Bot Server –∑–∞–ø—É—â–µ–Ω!');
    console.log('üìû –ü–æ—Ä—Ç:', PORT);
    console.log('ü§ñ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', TOKEN ? '‚úÖ' : '‚ùå');
    console.log('üëë –ê–¥–º–∏–Ω—ã:', ADMINS.join(', '));
    console.log('üåê WebApp URL:', WEB_APP_URL);
    console.log('üíæ –°—Ç–∞—Ç—É—Å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏');
    console.log('===================================');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
    bot.getMe().then(botInfo => {
        console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram API');
        console.log('ü§ñ Username –±–æ—Ç–∞:', botInfo.username);
    }).catch(error => {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', error.message);
    });
});


