const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

const app = express();
const PORT = process.env.PORT || 3000;

// ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
const TOKEN = process.env.BOT_TOKEN || '–í–ê–®_–ù–û–í–´–ô_–¢–û–ö–ï–ù';
const ADMINS = [1777213824, 594143385, 1097210873];
const WEB_APP_URL = 'https://gogo-kohl-beta.vercel.app';
// ===================

// –†–∞–∑—Ä–µ—à–∞–µ–º CORS
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    res.header('Access-Control-Allow-Methods', 'GET, OPTIONS');
    next();
});

app.options('*', (req, res) => {
    res.sendStatus(200);
});

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ polling
const bot = new TelegramBot(TOKEN, {
    polling: {
        interval: 300,
        timeout: 10,
        limit: 100,
        params: {
            timeout: 10,
            allowed_updates: ['message', 'callback_query']
        }
    }
});

// ===== –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• =====
let streamStatus = {
    isStreamLive: false,
    streamUrl: '',
    eventDescription: '',
    lastUpdated: new Date().toISOString()
};

let announcements = [];
let userChats = new Set();

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö POLLING =====
let pollingRestartAttempts = 0;
const MAX_POLLING_RESTARTS = 5;

bot.on('polling_error', (error) => {
    console.log('‚ùå Polling error:', error.code, error.message);
    
    if (error.code === 'ETELEGRAM' && error.message.includes('409')) {
        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ 409 - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º polling...');
        
        if (pollingRestartAttempts < MAX_POLLING_RESTARTS) {
            pollingRestartAttempts++;
            
            setTimeout(() => {
                bot.stopPolling().then(() => {
                    console.log('‚úÖ –°—Ç–∞—Ä—ã–π polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                    setTimeout(() => {
                        bot.startPolling().then(() => {
                            console.log('‚úÖ –ù–æ–≤—ã–π polling –∑–∞–ø—É—â–µ–Ω');
                        }).catch(pollError => {
                            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling:', pollError);
                        });
                    }, 2000);
                }).catch(stopError => {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling:', stopError);
                });
            }, 3000);
        } else {
            console.log('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ polling');
        }
    }
});

bot.on('webhook_error', (error) => {
    console.log('‚ùå Webhook error:', error);
});

// ===== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í =====
function isAdmin(userId) {
    return ADMINS.includes(Number(userId));
}

// ===== –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –°–¢–†–ò–ú–ê =====
async function updateStreamStatus(isLive, streamUrl = '', eventDescription = '') {
    try {
        streamStatus = {
            isStreamLive: isLive,
            streamUrl: streamUrl,
            eventDescription: eventDescription,
            lastUpdated: new Date().toISOString()
        };
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∏–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:', streamStatus);
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        return false;
    }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–ù–û–ù–°–û–í =====
function addAnnouncement(text, type = 'info') {
    const newAnnouncement = {
        id: Date.now(),
        text: text,
        type: type,
        createdAt: new Date().toISOString()
    };
    
    announcements.push(newAnnouncement);
    console.log('‚úÖ –ê–Ω–æ–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω:', newAnnouncement);
    return true;
}

function clearAnnouncements() {
    announcements = [];
    console.log('‚úÖ –í—Å–µ –∞–Ω–æ–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã');
    return true;
}

// ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω /start –æ—Ç:', msg.from.id);
    userChats.add(msg.chat.id);
    
    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: WEB_APP_URL }
                }
            ]]
        }
    };
    
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', keyboard)
        .catch(error => console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error));
});

// –ö–æ–º–∞–Ω–¥–∞ /live
bot.onText(/\/live (.+) (.+)/, async (msg, match) => {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω /live –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const streamUrl = match[1];
    const eventDescription = match[2];
    
    const success = await updateStreamStatus(true, streamUrl, eventDescription);
    
    if (success) {
        for (const chatId of userChats) {
            try {
                await bot.sendMessage(chatId, `üî¥ –ù–ê–ß–ê–õ–°–Ø –°–¢–†–ò–ú!\n${eventDescription}\n${streamUrl}`);
                await new Promise(resolve => setTimeout(resolve, 100));
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            }
        }
    }
    
    bot.sendMessage(msg.chat.id, success ? 
        `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${streamUrl}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${eventDescription}` : 
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.onText(/\/stop/, async (msg) => {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω /stop –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const success = await updateStreamStatus(false, '', '');
    bot.sendMessage(msg.chat.id, success ? 
        '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /announce
bot.onText(/\/announce (.+)/, (msg, match) => {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω /announce –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const text = match[1];
    const success = addAnnouncement(text);
    
    if (success) {
        for (const chatId of userChats) {
            try {
                bot.sendMessage(chatId, `üì¢ –ê–ù–û–ù–°:\n${text}`);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
            }
        }
    }
    
    bot.sendMessage(msg.chat.id, success ? 
        `‚úÖ –ê–Ω–æ–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω:\n${text}` : 
        '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–Ω—Å–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /clear_announce
bot.onText(/\/clear_announce/, (msg) => {
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω /clear_announce –æ—Ç:', msg.from.id);
    
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    const success = clearAnnouncements();
    bot.sendMessage(msg.chat.id, success ? 
        '‚úÖ –í—Å–µ –∞–Ω–æ–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã' : 
        '‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–æ–Ω—Å–æ–≤'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.onText(/\/stats/, (msg) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤!');
    }
    
    bot.sendMessage(msg.chat.id,
        `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n` +
        `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChats.size}\n` +
        `üé¨ –°—Ç—Ä–∏–º: ${streamStatus.isStreamLive ? '–í –≠–§–ò–†–ï' : '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `üìù –ê–Ω–æ–Ω—Å–æ–≤: ${announcements.length}\n` +
        `üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${pollingRestartAttempts}\n` +
        `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}`
    );
});

// ===== WEB-–°–ï–†–í–ï–† –ò API =====
app.get('/', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: 'Ludogolik Bot Server —Ä–∞–±–æ—Ç–∞–µ—Ç',
        users: userChats.size,
        stream_live: streamStatus.isStreamLive,
        polling_restarts: pollingRestartAttempts
    });
});

// API –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞
app.get('/status', (req, res) => {
    res.json(streamStatus);
});

// API –¥–ª—è –∞–Ω–æ–Ω—Å–æ–≤
app.get('/announcements', (req, res) => {
    res.json(announcements);
});

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
app.listen(PORT, () => {
    console.log('===================================');
    console.log('üöÄ Ludogolik Bot Server –∑–∞–ø—É—â–µ–Ω!');
    console.log('üìû –ü–æ—Ä—Ç:', PORT);
    console.log('ü§ñ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('üëë –ê–¥–º–∏–Ω—ã:', ADMINS.join(', '));
    console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userChats.size);
    console.log('===================================');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    setTimeout(() => {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling...');
        bot.stopPolling().then(() => {
            console.log('‚úÖ –°—Ç–∞—Ä—ã–π polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            setTimeout(() => {
                bot.startPolling().then(() => {
                    console.log('‚úÖ –ù–æ–≤—ã–π polling –∑–∞–ø—É—â–µ–Ω');
                    pollingRestartAttempts = 0;
                }).catch(error => {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ polling:', error);
                });
            }, 2000);
        }).catch(error => {
            console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling:', error);
        });
    }, 3000);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});




