const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');

const app = express();
const PORT = process.env.PORT || 3000;

// ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
const TOKEN = process.env.BOT_TOKEN;
const ADMINS = [1777213824, 594143385, 1097210873];
const WEB_APP_URL = 'https://gogo-kohl-beta.vercel.app';
const RENDER_URL = 'https://go-5zty.onrender.com';
// ===================

if (!TOKEN) {
    console.error('‚ùå FATAL: BOT_TOKEN not found in environment variables');
    process.exit(1);
}

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
    res.header('Access-Control-Allow-Headers', '*');
    res.header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    next();
});

app.options('*', (req, res) => {
    res.sendStatus(200);
});

const bot = new TelegramBot(TOKEN);

// ===== –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –í –ü–ê–ú–Ø–¢–ò =====
let streamStatus = {
    isStreamLive: false,
    streamUrl: '',
    eventDescription: '',
    lastUpdated: new Date().toISOString()
};

let announcements = [];
let userChats = new Set();
let cachedData = null;
let cacheTimestamp = 0;

// ===== –†–ï–ì–£–õ–Ø–†–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï =====
function backupToEnv() {
    try {
        console.log('üíæ Backup stats:', {
            announcements: announcements.length,
            users: userChats.size,
            time: new Date().toLocaleTimeString('ru-RU')
        });
    } catch (error) {
        console.error('‚ùå Backup error:', error);
    }
}

// ===== –ü–†–û–ì–†–ï–í –°–ï–†–í–ï–†–ê =====
async function keepAlive() {
    try {
        setInterval(async () => {
            try {
                await axios.get(`${RENDER_URL}/health`);
                backupToEnv();
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≥—Ä–µ—Ç:', new Date().toLocaleTimeString('ru-RU'));
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞:', error.message);
            }
        }, 4 * 60 * 1000);
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ keepAlive:', error);
    }
}

// ===== –§–£–ù–ö–¶–ò–Ø –£–°–¢–ê–ù–û–í–ö–ò WEBHOOK =====
async function setupWebhook() {
    try {
        const webhookUrl = `${RENDER_URL}/webhook`;
        console.log('üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é webhook:', webhookUrl);
        
        await bot.deleteWebHook();
        const result = await bot.setWebHook(webhookUrl);
        
        const webhookInfo = await bot.getWebHookInfo();
        console.log('üìã Webhook info:', webhookInfo.url);
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error);
        return false;
    }
}

function isAdmin(userId) {
    return ADMINS.includes(Number(userId));
}

async function updateStreamStatus(isLive, streamUrl = '', eventDescription = '') {
    try {
        streamStatus = {
            isStreamLive: isLive,
            streamUrl: streamUrl,
            eventDescription: eventDescription,
            lastUpdated: new Date().toISOString()
        };
        cachedData = null;
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        return false;
    }
}

function addAnnouncement(text, color = 'blue') {
    const newAnnouncement = {
        id: Date.now(),
        text: text,
        color: color,
        createdAt: new Date().toISOString()
    };
    announcements.push(newAnnouncement);
    cachedData = null;
    return newAnnouncement.id;
}

function clearAnnouncements() {
    const count = announcements.length;
    announcements = [];
    cachedData = null;
    return count;
}

function removeAnnouncement(id) {
    const index = announcements.findIndex(a => a.id === id);
    if (index !== -1) {
        const removed = announcements.splice(index, 1)[0];
        cachedData = null;
        return removed;
    }
    return null;
}

// ===== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê =====

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
    userChats.add(msg.chat.id);
    
    const keyboard = {
        reply_markup: {
            inline_keyboard: [[
                {
                    text: 'üé∞ –û–¢–ö–†–´–¢–¨ –°–ü–ò–°–û–ö –ö–ê–ó–ò–ù–û',
                    web_app: { url: WEB_APP_URL }
                }
            ]]
        }
    };
    
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ:', keyboard);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
    const helpText = `
ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–∑–∏–Ω–æ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

üëë *–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:*
/live [—Å—Å—ã–ª–∫–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ] - –ù–∞—á–∞—Ç—å —Å—Ç—Ä–∏–º
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∏–º
/text [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–æ–Ω—Å
/clear_text - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/list_text - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–Ω–æ–Ω—Å—ã
/remove_text [ID] - –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–æ–Ω—Å
/broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ] - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
/live https://twitch.tv –ú–æ–π –∫—Ä—É—Ç–æ–π —Å—Ç—Ä–∏–º
/text —Ü–≤–µ—Ç:green üéâ –ë–æ–Ω—É—Å 200%!
/remove_text 123456789
/text –ü—Ä–æ—Å—Ç–æ –∞–Ω–æ–Ω—Å –±–µ–∑ —Ü–≤–µ—Ç–∞
    `;
    
    bot.sendMessage(msg.chat.id, helpText, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.onText(/\/stats/, (msg) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    bot.sendMessage(msg.chat.id,
        `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n` +
        `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userChats.size}\n` +
        `üé¨ –°—Ç—Ä–∏–º: ${streamStatus.isStreamLive ? '–í –≠–§–ò–†–ï' : '–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `üìù –ê–Ω–æ–Ω—Å–æ–≤: ${announcements.length}\n` +
        `üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString('ru-RU')}`,
        { parse_mode: 'Markdown' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /live - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
bot.onText(/\/live (.+?) (.+)/, async (msg, match) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    const streamUrl = match[1];
    const eventDescription = match[2];
    
    const success = await updateStreamStatus(true, streamUrl, eventDescription);
    bot.sendMessage(msg.chat.id, success ? 
        `‚úÖ –°—Ç—Ä–∏–º –∑–∞–ø—É—â–µ–Ω!\n–°—Å—ã–ª–∫–∞: ${streamUrl}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${eventDescription}` : 
        '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /stop
bot.onText(/\/stop/, async (msg) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    const success = await updateStreamStatus(false);
    bot.sendMessage(msg.chat.id, success ? 
        '‚úÖ –°—Ç—Ä–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : 
        '‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∏–º–∞'
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /text - —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–≤–µ—Ç–æ–≤
bot.onText(/\/text (.+)/, (msg, match) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    let text = match[1];
    let color = 'blue';
    
    const colorMatch = text.match(/—Ü–≤–µ—Ç:(\w+)\s+/i);
    if (colorMatch) {
        color = colorMatch[1];
        text = text.replace(colorMatch[0], '');
    }
    
    const announcementId = addAnnouncement(text, color);
    bot.sendMessage(msg.chat.id, 
        `‚úÖ –ê–Ω–æ–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω!\nID: ${announcementId}\n–¶–≤–µ—Ç: ${color}\n–¢–µ–∫—Å—Ç: ${text}`
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /clear_text
bot.onText(/\/clear_text/, (msg) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    const count = clearAnnouncements();
    bot.sendMessage(msg.chat.id, 
        `‚úÖ –í—Å–µ –∞–Ω–æ–Ω—Å—ã –æ—á–∏—â–µ–Ω—ã!\n–£–¥–∞–ª–µ–Ω–æ: ${count} –∞–Ω–æ–Ω—Å–æ–≤`
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /list_text
bot.onText(/\/list_text/, (msg) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    if (announcements.length === 0) {
        return bot.sendMessage(msg.chat.id, 'üìù –°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ –ø—É—Å—Ç');
    }
    
    const announcementList = announcements.map(a => 
        `üÜî ID: ${a.id}\nüé® –¶–≤–µ—Ç: ${a.color}\nüìù –¢–µ–∫—Å—Ç: ${a.text}\n‚è∞ –î–∞—Ç–∞: ${new Date(a.createdAt).toLocaleString('ru-RU')}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`
    ).join('\n');
    
    bot.sendMessage(msg.chat.id, 
        `üìù *–°–ø–∏—Å–æ–∫ –∞–Ω–æ–Ω—Å–æ–≤ (${announcements.length}):*\n\n${announcementList}`,
        { parse_mode: 'Markdown' }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ /remove_text
bot.onText(/\/remove_text (\d+)/, (msg, match) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    const id = parseInt(match[1]);
    const removed = removeAnnouncement(id);
    
    if (removed) {
        bot.sendMessage(msg.chat.id, 
            `‚úÖ –ê–Ω–æ–Ω—Å —É–¥–∞–ª–µ–Ω!\nID: ${id}\n–¢–µ–∫—Å—Ç: ${removed.text}`
        );
    } else {
        bot.sendMessage(msg.chat.id, 
            `‚ùå –ê–Ω–æ–Ω—Å —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`
        );
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /broadcast
bot.onText(/\/broadcast (.+)/, async (msg, match) => {
    if (!isAdmin(msg.from.id)) {
        return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!');
    }
    
    const message = match[1];
    let successCount = 0;
    let errorCount = 0;
    
    bot.sendMessage(msg.chat.id, `üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${userChats.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
    
    for (const chatId of userChats) {
        try {
            await bot.sendMessage(chatId, `üì¢ –û–ë–™–Ø–í–õ–ï–ù–ò–ï:\n\n${message}`);
            successCount++;
            await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
            errorCount++;
        }
    }
    
    bot.sendMessage(msg.from.id,
        `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n` +
        `‚úì –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${successCount}\n` +
        `‚úó –û—à–∏–±–æ–∫: ${errorCount}`
    );
});

// ===== API ENDPOINTS =====

app.post('/webhook', (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π endpoint –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/all-data', (req, res) => {
    if (cachedData && Date.now() - cacheTimestamp < 2 * 60 * 1000) {
        return res.json(cachedData);
    }
    
    cachedData = {
        streamStatus: streamStatus,
        announcements: announcements
    };
    cacheTimestamp = Date.now();
    
    res.json(cachedData);
});

app.get('/status', (req, res) => {
    res.json(streamStatus);
});

app.get('/announcements', (req, res) => {
    res.json(announcements);
});

app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        users: userChats.size,
        announcements: announcements.length,
        memory: process.memoryUsage().rss / 1024 / 1024 + ' MB'
    });
});

app.get('/setup-webhook', async (req, res) => {
    const success = await setupWebhook();
    res.json({ success, message: success ? 'Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' });
});

app.get('/info', (req, res) => {
    res.json({
        status: 'online',
        users: userChats.size,
        stream_live: streamStatus.isStreamLive,
        announcements_count: announcements.length,
        server_time: new Date().toISOString()
    });
});

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
app.listen(PORT, async () => {
    console.log('===================================');
    console.log('üöÄ Ludogolik Bot Server –∑–∞–ø—É—â–µ–Ω!');
    console.log('üìû –ü–æ—Ä—Ç:', PORT);
    console.log('üåê URL:', RENDER_URL);
    console.log('ü§ñ –¢–æ–∫–µ–Ω:', TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('üëë –ê–¥–º–∏–Ω—ã:', ADMINS.join(', '));
    console.log('===================================');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ —Å–µ—Ä–≤–µ—Ä–∞
    keepAlive();
    
    // –ë—ç–∫–∞–ø –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(backupToEnv, 5 * 60 * 1000);
    
    setTimeout(async () => {
        const success = await setupWebhook();
        if (success) {
            console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook');
        }
    }, 3000);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    backupToEnv();
    bot.deleteWebHook();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    backupToEnv();
    bot.deleteWebHook();
    process.exit(0);
});

