const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const axios = require('axios');
const simpleGit = require('simple-git');
const fs = require('fs').promises;
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
const TOKEN = process.env.BOT_TOKEN;
const ADMINS = [1777213824, 594143385, 1097210873];
const WEB_APP_URL = 'https://gogo-kohl-beta.vercel.app';
const RENDER_URL = 'https://go-5zty.onrender.com';
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_REPO = process.env.GITHUB_REPO || 'mindbreakfast/go';
const DATA_FILE = 'data.json';
// ===================

if (!TOKEN) {
    console.error('‚ùå FATAL: BOT_TOKEN not found in environment variables');
    process.exit(1);
}

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ CORS –∏ —Ç.–¥.)

// ===== –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–• =====
let streamStatus = {
    isStreamLive: false,
    streamUrl: '',
    eventDescription: '',
    lastUpdated: new Date().toISOString()
};

let announcements = [];
let userChats = new Map();
let casinos = [];
let casinoEditingState = new Map();
let cachedData = null;
let cacheTimestamp = 0;

// ===== –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò =====
async function loadData() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...');
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try {
            const data = await fs.readFile(DATA_FILE, 'utf8');
            const parsedData = JSON.parse(data);
            
            casinos = parsedData.casinos || [];
            announcements = parsedData.announcements || [];
            userChats = new Map(Object.entries(parsedData.userChats || {}));
            streamStatus = parsedData.streamStatus || streamStatus;
            
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ ${DATA_FILE}: ${casinos.length} –∫–∞–∑–∏–Ω–æ`);
            return true;
        } catch (error) {
            console.log('üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É—é GitHub...');
        }
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ GitHub
        if (GITHUB_TOKEN) {
            try {
                const response = await axios.get(
                    `https://api.github.com/repos/${GITHUB_REPO}/contents/${DATA_FILE}`,
                    {
                        headers: {
                            'Authorization': `token ${GITHUB_TOKEN}`,
                            'Accept': 'application/vnd.github.v3.raw'
                        }
                    }
                );
                
                const parsedData = response.data;
                casinos = parsedData.casinos || [];
                announcements = parsedData.announcements || [];
                userChats = new Map(Object.entries(parsedData.userChats || {}));
                streamStatus = parsedData.streamStatus || streamStatus;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
                await saveData();
                
                console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ GitHub: ${casinos.length} –∫–∞–∑–∏–Ω–æ`);
                return true;
            } catch (error) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ GitHub:', error.message);
            }
        }
        
        // –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (casinos.length === 0) {
            console.log('üìù –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–∑–∏–Ω–æ...');
            casinos = [
                {
                    id: 1,
                    name: "PINCO",
                    promocode: "SASH",
                    shortDescription: "–í–≤–æ–¥–∏ SASH –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –¥–æ 180% –Ω–∞ –¥–µ–ø",
                    fullDescription: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç 180%\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –±–æ–Ω—É—Å–∞: 500 000 RUB\n–û—Ç—ã–≥—Ä—ã—à –±–æ–Ω—É—Å–∞ (–≤–µ–π–¥–∂–µ—Ä): —Ö50\n–ü–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Ç—ã–≥—Ä—ã—à: 3 –¥–Ω—è (72 —á–∞—Å–∞)\n–ú–∞–∫—Å. —Å—É–º–º–∞ –±–æ–Ω—É—Å–∞: 500 000 RUB\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–µ—à–∞—É—Ç —Ö10",
                    url: "https://partnerprofitboost.com/L5ztWmif",
                    hiddenKeywords: ["PINCO", "–ü–∏–Ω–∫–æ", "gbyrj", "–∑—à—Ç—Å—â", "pinko", "–∑—à—Ç–ª—â"],
                    category: "other",
                    isActive: true,
                    isPinned: false,
                    createdAt: new Date().toISOString()
                }
            ];
            await saveData();
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${casinos.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–∑–∏–Ω–æ`);
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

async function saveData() {
    try {
        const dataToSave = {
            casinos,
            announcements,
            userChats: Object.fromEntries(userChats),
            streamStatus,
            lastUpdated: new Date().toISOString()
        };
        
        await fs.writeFile(DATA_FILE, JSON.stringify(dataToSave, null, 2));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ GitHub
        if (GITHUB_TOKEN) {
            await saveToGitHub();
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
        return false;
    }
}

async function saveToGitHub() {
    try {
        const git = simpleGit();
        await git.addConfig('user.name', 'mindbreakfast');
        await git.addConfig('user.email', 'homegamego@gmail.com');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const status = await git.status();
        if (status.modified.includes(DATA_FILE) || status.not_added.includes(DATA_FILE)) {
            await git.add(DATA_FILE);
            await git.commit('Auto-update: ' + new Date().toISOString());
            await git.push('origin', 'main');
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub');
        } else {
            console.log('‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç, –∫–æ–º–º–∏—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ GitHub:', error);
        return false;
    }
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–ó–ò–ù–û =====
function getNextCasinoId() {
    return casinos.length > 0 ? Math.max(...casinos.map(c => c.id)) + 1 : 1;
}

async function addCasino(casinoData) {
    const newCasino = {
        id: getNextCasinoId(),
        ...casinoData,
        isActive: true,
        isPinned: false,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
    };
    casinos.push(newCasino);
    await saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    return newCasino;
}

async function updateCasino(id, updates) {
    const index = casinos.findIndex(c => c.id === id);
    if (index !== -1) {
        casinos[index] = {
            ...casinos[index],
            ...updates,
            updatedAt: new Date().toISOString()
        };
        await saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return casinos[index];
    }
    return null;
}

async function deleteCasino(id) {
    const index = casinos.findIndex(c => c.id === id);
    if (index !== -1) {
        const deleted = casinos.splice(index, 1)[0];
        await saveData(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return deleted;
    }
    return null;
}

// ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
app.listen(PORT, async () => {
    console.log('===================================');
    console.log('üöÄ Ludogolik Bot Server –∑–∞–ø—É—â–µ–Ω!');
    console.log('üìû –ü–æ—Ä—Ç:', PORT);
    console.log('üåê URL:', RENDER_URL);
    console.log('ü§ñ –¢–æ–∫–µ–Ω:', TOKEN ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('üëë –ê–¥–º–∏–Ω—ã:', ADMINS.join(', '));
    console.log('===================================');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await loadData();
    
    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞)
});

// –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∫–æ–º–∞–Ω–¥ –∑–∞–º–µ–Ω—è–µ–º saveDataToFile() –Ω–∞ saveData()
